"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8519],{25526:(e,r,o)=>{o.r(r),o.d(r,{assets:()=>a,contentTitle:()=>s,default:()=>l,frontMatter:()=>i,metadata:()=>c,toc:()=>m});var n=o(74848),t=o(28453);const i={},s=void 0,c={id:"API-Reference/worker/WorkerComm",title:"WorkerComm",description:"Import :",source:"@site/api/API-Reference/worker/WorkerComm.md",sourceDirName:"API-Reference/worker",slug:"/API-Reference/worker/WorkerComm",permalink:"/api/API-Reference/worker/WorkerComm",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"IndexingWorker",permalink:"/api/API-Reference/worker/IndexingWorker"}},a={},m=[{value:"Import :",id:"import-",level:3},{value:"worker/WorkerComm",id:"workerworkercomm",level:2},{value:"Import",id:"import",level:2},{value:"Creating a WebWorker from your extension and attaching <code>WorkerComm</code> to it.",id:"creating-a-webworker-from-your-extension-and-attaching-workercomm-to-it",level:3},{value:"Loading <code>WorkerComm</code> from within your webWorker",id:"loading-workercomm-from-within-your-webworker",level:3},{value:"APIs",id:"apis",level:2},{value:"worker/WorkerComm.createWorkerComm(postTarget, eventDispatcher) : <code>function</code>",id:"workerworkercommcreateworkercommposttarget-eventdispatcher--function",level:3},{value:"&quot;EVENT_WORKER_COMM_INIT_COMPLETE&quot;",id:"event_worker_comm_init_complete",level:3}];function d(e){const r={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.h3,{id:"import-",children:"Import :"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-js",children:'brackets.getModule("worker/WorkerComm")\n'})}),"\n",(0,n.jsx)("a",{name:"module_worker/WorkerComm"}),"\n",(0,n.jsx)(r.h2,{id:"workerworkercomm",children:"worker/WorkerComm"}),"\n",(0,n.jsx)(r.p,{children:"WorkerComm provides util methods to communicate between web workers and Phoenix.\nThis module can be loaded from within web-workers and a phoenix extension that loads the web-worker."}),"\n",(0,n.jsx)(r.h2,{id:"import",children:"Import"}),"\n",(0,n.jsxs)(r.h3,{id:"creating-a-webworker-from-your-extension-and-attaching-workercomm-to-it",children:["Creating a WebWorker from your extension and attaching ",(0,n.jsx)(r.code,{children:"WorkerComm"})," to it."]}),"\n",(0,n.jsxs)(r.p,{children:["See an example extension code below that creates its own web worker and uses ",(0,n.jsx)(r.code,{children:"WorkerComm"})," for communication."]}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)(r.strong,{children:"Example"})}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-js",children:'// from within an extension\nconst WorkerComm = brackets.getModule("worker/WorkerComm"),\n      EventDispatcher = brackets.getModule("utils/EventDispatcher"),\n      ExtensionUtils = brackets.getModule("utils/ExtensionUtils");\n\n// figure out the path of the web worker relative to your extension\nlet workerPath = ExtensionUtils.getModulePath(module, "my_worker_path_within_extension.js")\n\n// we need to pass in the `workerCommUrl` so that the web-worker can\n// load`WorkerComm` within the worker context as described below.\nlet workerCommUrl = `${Phoenix.baseURL}worker/WorkerComm.js`;\nlet eventDispatcherURL = `${Phoenix.baseURL}utils/EventDispatcher.js`;\n\n// load the worker\nconst _myWorker = new Worker(\n`${workerPath}?workerCommUrl=${workerCommUrl}&eventDispatcherURL=${eventDispatcherURL}`);\n\n// Not create a `WorkerComm` object and attach to your extension module exports.\nEventDispatcher.makeEventDispatcher(exports);\n// all WorkerComm objects needs to be an EventDispatcher.\nWorkerComm.createWorkerComm(_myWorker, exports);\n\n// Now `exports` can be used to communicate with the web-worker\n// using `WorkerComm` APIs listed below.\n'})}),"\n",(0,n.jsxs)(r.h3,{id:"loading-workercomm-from-within-your-webworker",children:["Loading ",(0,n.jsx)(r.code,{children:"WorkerComm"})," from within your webWorker"]}),"\n",(0,n.jsxs)(r.p,{children:["The Web Worker we created above also needs to load ",(0,n.jsx)(r.code,{children:"WorkerComm"})," to be able to communicate with the ",(0,n.jsx)(r.code,{children:"WorkerComm"}),"\ninstance in Phoenix. For this, we need to load ",(0,n.jsx)(r.code,{children:"WorkerComm"})," from the URL parameters.\n(WorkerComm.js lib url needs to passed in while creating the web worker from Phoenix).\n",(0,n.jsx)(r.strong,{children:"Example"})]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-js",children:"const urlParams = new URLSearchParams(location.search);\nimportScripts(urlParams.get('workerCommUrl'));\nimportScripts(urlParams.get('eventDispatcherURL'));\n// After this, a global `WorkerComm` object will be available within the\n// web-worker that can be used to communicate with Phoenix.\n"})}),"\n",(0,n.jsx)(r.h2,{id:"apis",children:"APIs"}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.a,{href:"#module_worker/WorkerComm",children:"worker/WorkerComm"}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.a,{href:"#module_worker/WorkerComm..createWorkerComm",children:".createWorkerComm(postTarget, eventDispatcher)"})," : ",(0,n.jsx)("code",{children:"function"})]}),"\n",(0,n.jsx)(r.li,{children:(0,n.jsx)(r.a,{href:"#event_EVENT_WORKER_COMM_INIT_COMPLETE",children:'"EVENT_WORKER_COMM_INIT_COMPLETE"'})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)("a",{name:"module_worker/WorkerComm..createWorkerComm"}),"\n",(0,n.jsxs)(r.h3,{id:"workerworkercommcreateworkercommposttarget-eventdispatcher--function",children:["worker/WorkerComm.createWorkerComm(postTarget, eventDispatcher) : ",(0,n.jsx)("code",{children:"function"})]}),"\n",(0,n.jsxs)(r.p,{children:["Adds support for WorkerComm APIs to the provided web-Worker instance. Only available in the main thread.\nThis API should be called immediately after creating the worker in main thread.\nCreate a web-worker with ",(0,n.jsx)(r.code,{children:"WorkerComm"})," in an extension.\n// load the worker [See API docs for full sample]\nconst _myWorker = new Worker(\n",(0,n.jsx)(r.code,{children:"${workerPath}?workerCommUrl=${workerCommUrl}&eventDispatcherURL=${eventDispatcherURL}"}),");"]}),"\n",(0,n.jsxs)(r.p,{children:["// Now create a ",(0,n.jsx)(r.code,{children:"WorkerComm"})," object and attach to your extension module exports.\nEventDispatcher.makeEventDispatcher(exports);\n// all WorkerComm objects needs to be an EventDispatcher.\nWorkerComm.createWorkerComm(_myWorker, exports);"]}),"\n",(0,n.jsxs)(r.p,{children:[(0,n.jsx)(r.strong,{children:"Kind"}),": inner method of ",(0,n.jsx)(r.a,{href:"#module_worker/WorkerComm",children:(0,n.jsx)("code",{children:"worker/WorkerComm"})})]}),"\n",(0,n.jsxs)(r.table,{children:[(0,n.jsx)(r.thead,{children:(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.th,{children:"Param"}),(0,n.jsx)(r.th,{children:"Type"}),(0,n.jsx)(r.th,{children:"Description"})]})}),(0,n.jsxs)(r.tbody,{children:[(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"postTarget"}),(0,n.jsx)(r.td,{children:(0,n.jsx)("code",{children:"string"})}),(0,n.jsx)(r.td,{children:"The web-worker reference."})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"eventDispatcher"}),(0,n.jsx)(r.td,{children:(0,n.jsx)("code",{children:"object"})}),(0,n.jsxs)(r.td,{children:["created with ",(0,n.jsx)(r.code,{children:"util/EventDispatcher"}),"."]})]})]})]}),"\n",(0,n.jsx)("a",{name:"event_EVENT_WORKER_COMM_INIT_COMPLETE"}),"\n",(0,n.jsx)(r.h3,{id:"event_worker_comm_init_complete",children:'"EVENT_WORKER_COMM_INIT_COMPLETE"'}),"\n",(0,n.jsx)(r.p,{children:"Raised on main thread when WorkerComm is loaded in the web-worker and is ready."}),"\n",(0,n.jsxs)(r.p,{children:[(0,n.jsx)(r.strong,{children:"Kind"}),": event emitted by ",(0,n.jsx)(r.a,{href:"#module_worker/WorkerComm",children:(0,n.jsx)("code",{children:"worker/WorkerComm"})})]})]})}function l(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},28453:(e,r,o)=>{o.d(r,{R:()=>s,x:()=>c});var n=o(96540);const t={},i=n.createContext(t);function s(e){const r=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function c(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),n.createElement(i.Provider,{value:r},e.children)}}}]);