"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4471],{17034:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>d,default:()=>x,frontMatter:()=>t,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"API-Reference/worker/IndexingWorker","title":"IndexingWorker","description":"Import :","source":"@site/api/API-Reference/worker/IndexingWorker.md","sourceDirName":"API-Reference/worker","slug":"/API-Reference/worker/IndexingWorker","permalink":"/api/API-Reference/worker/IndexingWorker","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"StatusBar","permalink":"/api/API-Reference/widgets/StatusBar"},"next":{"title":"WorkerComm","permalink":"/api/API-Reference/worker/WorkerComm"}}');var i=n(74848),s=n(28453);const t={},d=void 0,l={},c=[{value:"Import :",id:"import-",level:3},{value:"worker/IndexingWorker",id:"workerindexingworker",level:2},{value:"Extending the indexing worker",id:"extending-the-indexing-worker",level:2},{value:"worker/IndexingWorker.WorkerComm",id:"workerindexingworkerworkercomm",level:3},{value:"&quot;EVENT_CRAWL_STARTED&quot;",id:"event_crawl_started",level:3},{value:"&quot;EVENT_CRAWL_PROGRESS&quot;",id:"event_crawl_progress",level:3},{value:"&quot;EVENT_CRAWL_COMPLETE&quot;",id:"event_crawl_complete",level:3}];function h(e){const r={a:"a",br:"br",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.h3,{id:"import-",children:"Import :"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-js",children:'const IndexingWorker = brackets.getModule("worker/IndexingWorker")\n'})}),"\n",(0,i.jsx)("a",{name:"module_worker/IndexingWorker"}),"\n",(0,i.jsx)(r.h2,{id:"workerindexingworker",children:"worker/IndexingWorker"}),"\n",(0,i.jsx)(r.p,{children:"Phoenix houses a file indexing worker which caches all cacheable files of a project in memory.\rThis module can be used to communicate with the Index and extend it by attaching new js worker scripts to the\rindexing worker as discussed below. Any extension that works on a large number of files should use the indexing\rworker cache to free up the main thread of heavy file access."}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:["Extensions performing large compute tasks should create their own worker and may use easy util methods in\r",(0,i.jsx)(r.a,{href:"./WorkerComm",children:"worker/WorkerComm"})," to communicate with the web worker."]}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"extending-the-indexing-worker",children:"Extending the indexing worker"}),"\n",(0,i.jsx)(r.p,{children:"You can add your own custom scripts to the indexing worker by following the below example. Suppose you have an\rextension folder with the following structure:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{children:"myExtensionFolder\r\u2502  my_worker.js // the script that you need to attach to the web worker\r\u2502  main.js\n"})}),"\n",(0,i.jsxs)(r.p,{children:["In ",(0,i.jsx)(r.code,{children:"main.js"})," extension module, we can import ",(0,i.jsx)(r.code,{children:"my_worker.js"})," script into ",(0,i.jsx)(r.code,{children:"IndexingWorker"})," by:"]}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"Example"})}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-js",children:'let ExtensionUtils = brackets.getModule("utils/ExtensionUtils");\rlet workerPath = ExtensionUtils.getModulePath(module, "my_worker.js")\rIndexingWorker.loadScriptInWorker(workerPath);\n'})}),"\n",(0,i.jsx)(r.p,{children:"Once the worker script is loaded with the above step:"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:["Phoenix can communicate with worker using the ",(0,i.jsx)(r.code,{children:"IndexingWorker"})," reference in Phoenix."]}),"\n",(0,i.jsxs)(r.li,{children:["Worker can communicate with Phoenix with the global ",(0,i.jsx)(r.code,{children:"WorkerComm"})," reference within the Indexing worker.\rAll utility methods in module ",(0,i.jsx)(r.a,{href:"./WorkerComm",children:"worker/WorkerComm"})," can be used for worker communication."]}),"\n"]}),"\n",(0,i.jsxs)(r.p,{children:["A global constant ",(0,i.jsx)(r.code,{children:"Phoenix.baseURL"})," is available in the worker context to get the base url from which phoenix was\rlaunched."]}),"\n",(0,i.jsxs)(r.p,{children:["NB: You can use all util methods available in ",(0,i.jsx)(r.code,{children:"worker/WorkerComm"})," as ",(0,i.jsx)(r.code,{children:"IndexingWorker"})," internally uses ",(0,i.jsx)(r.code,{children:"WorkerComm"}),"\rto communicate with the underlying worker thread."]}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.a,{href:"#module_worker/IndexingWorker",children:"worker/IndexingWorker"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"#module_worker/IndexingWorker..WorkerComm",children:".WorkerComm"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"#event_EVENT_CRAWL_STARTED",children:'"EVENT_CRAWL_STARTED"'})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"#event_EVENT_CRAWL_PROGRESS",children:'"EVENT_CRAWL_PROGRESS"'})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"#event_EVENT_CRAWL_COMPLETE",children:'"EVENT_CRAWL_COMPLETE"'})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)("a",{name:"module_worker/IndexingWorker..WorkerComm"}),"\n",(0,i.jsx)(r.h3,{id:"workerindexingworkerworkercomm",children:"worker/IndexingWorker.WorkerComm"}),"\n",(0,i.jsxs)(r.p,{children:["To communicate between the IndexingWorker and Phoenix, the following methods are available:\r",(0,i.jsx)(r.code,{children:"loadScriptInWorker"}),", ",(0,i.jsx)(r.code,{children:"execPeer"}),", ",(0,i.jsx)(r.code,{children:"setExecHandler"}),", ",(0,i.jsx)(r.code,{children:"triggerPeer"})," and other APIs described\rin module ",(0,i.jsx)(r.code,{children:"worker/WorkerComm"}),".\rThe above methods can be used with either ",(0,i.jsx)(r.code,{children:"IndexingWorker"})," reference within Phoenix\ror the global ",(0,i.jsx)(r.code,{children:"WorkerComm"})," reference within the Indexing worker. (See example below.)"]}),"\n",(0,i.jsxs)(r.p,{children:["See ",(0,i.jsx)(r.a,{href:"./WorkerComm",children:"worker/WorkerComm"})," for detailed API docs."]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-js",children:'// To Execute a named function `extensionName.sayHello` in the worker from phoenix\r\r// in my_worker.js. It is a good practice to prefix your `[extensionName]`\r// to exec handler to prevent name collisions with other extensions.\r\rWorkerComm.setExecHandler("extensionName.sayHello", (arg)=>{\r    console.log("hello from worker ", arg); // prints "hello from worker phoenix"\r    return "Hello Phoenix";\r});\r\r// In Phoenix/extension\rlet workerMessage = await IndexingWorker.execPeer("extensionName.sayHello", "phoenix");\rconsole.log(workerMessage); // prints "Hello Phoenix"\n'})}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Kind"}),": inner property of ",(0,i.jsx)(r.a,{href:"#module_worker/IndexingWorker",children:(0,i.jsx)("code",{children:"worker/IndexingWorker"})})]}),"\n",(0,i.jsx)("a",{name:"event_EVENT_CRAWL_STARTED"}),"\n",(0,i.jsx)(r.h3,{id:"event_crawl_started",children:'"EVENT_CRAWL_STARTED"'}),"\n",(0,i.jsx)(r.p,{children:"Raised when crawling started in the indexing worker."}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Kind"}),": event emitted by ",(0,i.jsx)(r.a,{href:"#module_worker/IndexingWorker",children:(0,i.jsx)("code",{children:"worker/IndexingWorker"})})]}),"\n",(0,i.jsx)("a",{name:"event_EVENT_CRAWL_PROGRESS"}),"\n",(0,i.jsx)(r.h3,{id:"event_crawl_progress",children:'"EVENT_CRAWL_PROGRESS"'}),"\n",(0,i.jsx)(r.p,{children:"Raised when crawling in progressing within the worker. The handler will receive the\rfollowing properties as parameter."}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Kind"}),": event emitted by ",(0,i.jsx)(r.a,{href:"#module_worker/IndexingWorker",children:(0,i.jsx)("code",{children:"worker/IndexingWorker"})}),(0,i.jsx)(r.br,{}),"\n",(0,i.jsx)(r.strong,{children:"Properties"})]}),"\n",(0,i.jsxs)(r.table,{children:[(0,i.jsx)(r.thead,{children:(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.th,{children:"Name"}),(0,i.jsx)(r.th,{children:"Type"}),(0,i.jsx)(r.th,{children:"Description"})]})}),(0,i.jsxs)(r.tbody,{children:[(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"processed"}),(0,i.jsx)(r.td,{children:(0,i.jsx)("code",{children:"number"})}),(0,i.jsx)(r.td,{children:"The number of files cached till now."})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"total"}),(0,i.jsx)(r.td,{children:(0,i.jsx)("code",{children:"number"})}),(0,i.jsx)(r.td,{children:"Number of files to cache."})]})]})]}),"\n",(0,i.jsx)("a",{name:"event_EVENT_CRAWL_COMPLETE"}),"\n",(0,i.jsx)(r.h3,{id:"event_crawl_complete",children:'"EVENT_CRAWL_COMPLETE"'}),"\n",(0,i.jsx)(r.p,{children:"Raised when crawling is complete within the worker. The handler will receive the\rfollowing properties as parameter."}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Kind"}),": event emitted by ",(0,i.jsx)(r.a,{href:"#module_worker/IndexingWorker",children:(0,i.jsx)("code",{children:"worker/IndexingWorker"})}),(0,i.jsx)(r.br,{}),"\n",(0,i.jsx)(r.strong,{children:"Properties"})]}),"\n",(0,i.jsxs)(r.table,{children:[(0,i.jsx)(r.thead,{children:(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.th,{children:"Name"}),(0,i.jsx)(r.th,{children:"Type"}),(0,i.jsx)(r.th,{children:"Description"})]})}),(0,i.jsxs)(r.tbody,{children:[(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"numFilesCached"}),(0,i.jsx)(r.td,{children:(0,i.jsx)("code",{children:"number"})}),(0,i.jsx)(r.td,{})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"cacheSizeBytes"}),(0,i.jsx)(r.td,{children:(0,i.jsx)("code",{children:"number"})}),(0,i.jsx)(r.td,{})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"crawlTimeMs"}),(0,i.jsx)(r.td,{children:(0,i.jsx)("code",{children:"number"})}),(0,i.jsx)(r.td,{children:"in milliseconds."})]})]})]})]})}function x(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},28453:(e,r,n)=>{n.d(r,{R:()=>t,x:()=>d});var o=n(96540);const i={},s=o.createContext(i);function t(e){const r=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function d(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),o.createElement(s.Provider,{value:r},e.children)}}}]);