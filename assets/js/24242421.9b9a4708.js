"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[114],{65025:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>h,contentTitle:()=>a,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"API-Reference/editor/CodeHintManager","title":"CodeHintManager","description":"Import :","source":"@site/api/API-Reference/editor/CodeHintManager.md","sourceDirName":"API-Reference/editor","slug":"/API-Reference/editor/CodeHintManager","permalink":"/api/API-Reference/editor/CodeHintManager","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Editor","permalink":"/api/API-Reference/editor/"},"next":{"title":"EditorManager","permalink":"/api/API-Reference/editor/EditorManager"}}');var r=t(74848),s=t(28453);const o={},a=void 0,h={},d=[{value:"Import :",id:"import-",level:3},{value:"CodeHintManager",id:"codehintmanager",level:2},{value:"CodeHintManager.registerHintProvider(provider, languageIds, priority)",id:"codehintmanagerregisterhintproviderprovider-languageids-priority",level:3},{value:"CodeHintManager.hasValidExclusion(exclusion, textAfterCursor) \u21d2 <code>boolean</code>",id:"codehintmanagerhasvalidexclusionexclusion-textaftercursor--boolean",level:3},{value:"CodeHintManager.isOpen() \u21d2 <code>boolean</code>",id:"codehintmanagerisopen--boolean",level:3}];function l(e){const n={a:"a",br:"br",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h3,{id:"import-",children:"Import :"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'const CodeHintManager = brackets.getModule("editor/CodeHintManager")\n'})}),"\n",(0,r.jsx)("a",{name:"module_CodeHintManager"}),"\n",(0,r.jsx)(n.h2,{id:"codehintmanager",children:"CodeHintManager"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"CodeHintManager Overview:"})}),"\n",(0,r.jsx)(n.p,{children:"The CodeHintManager mediates the interaction between the editor and a\ncollection of hint providers. If hints are requested explicitly by the\nuser, then the providers registered for the current language are queried\nfor their ability to provide hints in order of descending priority by\nway their hasHints methods. Character insertions may also constitute an\nimplicit request for hints; consequently, providers for the current\nlanguage are also queried on character insertion for both their ability to\nprovide hints and also for the suitability of providing implicit hints\nin the given editor context."}),"\n",(0,r.jsx)(n.p,{children:"Once a provider responds affirmatively to a request for hints, the\nmanager begins a hinting session with that provider, begins to query\nthat provider for hints by way of its getHints method, and opens the\nhint list window. The hint list is kept open for the duration of the\ncurrent session. The manager maintains the session until either:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"the provider gives a null response to a request for hints;"}),"\n",(0,r.jsx)(n.li,{children:"a deferred response to getHints fails to resolve;"}),"\n",(0,r.jsx)(n.li,{children:"the user explicitly dismisses the hint list window;"}),"\n",(0,r.jsx)(n.li,{children:"the editor is closed or becomes inactive; or"}),"\n",(0,r.jsx)(n.li,{children:'the editor undergoes a "complex" change, e.g., a multi-character\ninsertion, deletion or navigation.'}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Single-character insertions, deletions or navigations may not\ninvalidate the current session; in which case, each such change\nprecipitates a successive call to getHints."}),"\n",(0,r.jsx)(n.p,{children:"If the user selects a hint from the rendered hint list then the\nprovider is responsible for inserting the hint into the editor context\nfor the current session by way of its insertHint method. The provider\nmay use the return value of insertHint to request that an additional\nexplicit hint request be triggered, potentially beginning a new\nsession."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"CodeHintProvider Overview:"})}),"\n",(0,r.jsx)(n.p,{children:"A code hint provider should implement the following three functions:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"- `CodeHintProvider.hasHints(editor, implicitChar)`\n- `CodeHintProvider.getHints(implicitChar)`\n- `CodeHintProvider.insertHint(hint)`\n"})}),"\n",(0,r.jsx)(n.p,{children:"The behavior of these three functions is described in detail below."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"__CodeHintProvider.hasHints(editor, implicitChar)__\n"})}),"\n",(0,r.jsx)(n.p,{children:"The method by which a provider indicates intent to provide hints for a\ngiven editor. The manager calls this method both when hints are\nexplicitly requested (via, e.g., Ctrl-Space) and when they may be\nimplicitly requested as a result of character insertion in the editor.\nIf the provider responds negatively then the manager may query other\nproviders for hints. Otherwise, a new hinting session begins with this\nprovider, during which the manager may repeatedly query the provider\nfor hints via the getHints method. Note that no other providers will be\nqueried until the hinting session ends."}),"\n",(0,r.jsx)(n.p,{children:"The implicitChar parameter is used to determine whether the hinting\nrequest is explicit or implicit. If the string is null then hints were\nexplicitly requested and the provider should reply based on whether it\nis possible to return hints for the given editor context. Otherwise,\nthe string contains just the last character inserted into the editor's\ndocument and the request for hints is implicit. In this case, the\nprovider should determine whether it is both possible and appropriate\nto show hints. Because implicit hints can be triggered by every\ncharacter insertion, hasHints may be called frequently; consequently,\nthe provider should endeavor to return a value as quickly as possible."}),"\n",(0,r.jsx)(n.p,{children:"Because calls to hasHints imply that a hinting session is about to\nbegin, a provider may wish to clean up cached data from previous\nsessions in this method. Similarly, if the provider returns true, it\nmay wish to prepare to cache data suitable for the current session. In\nparticular, it should keep a reference to the editor object so that it\ncan access the editor in future calls to getHints and insertHints."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"param {Editor} editor\n"})}),"\n",(0,r.jsx)(n.p,{children:"A non-null editor object for the active window."}),"\n",(0,r.jsxs)(n.p,{children:["param ",String," implicitChar\nEither null, if the hinting request was explicit, or a single character\nthat represents the last insertion and that indicates an implicit\nhinting request."]}),"\n",(0,r.jsxs)(n.p,{children:["return ",Boolean,"\nDetermines whether the current provider is able to provide hints for\nthe given editor context and, in case implicitChar is non- null,\nwhether it is appropriate to do so."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"__CodeHintProvider.getHints(implicitChar)__\n"})}),"\n",(0,r.jsx)(n.p,{children:"The method by which a provider provides hints for the editor context\nassociated with the current session. The getHints method is called only\nif the provider asserted its willingness to provide hints in an earlier\ncall to hasHints. The provider may return null or false, which indicates\nthat the manager should end the current hinting session and close the hint\nlist window; or true, which indicates that the manager should end the\ncurrent hinting session but immediately attempt to begin a new hinting\nsession by querying registered providers. Otherwise, the provider should\nreturn a response object that contains the following properties:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"hints, a sorted array hints that the provider could later insert\ninto the editor;"}),"\n",(0,r.jsx)(n.li,{children:"match, a string that the manager may use to emphasize substrings of\nhints in the hint list (case-insensitive); and"}),"\n",(0,r.jsx)(n.li,{children:"selectInitial, a boolean that indicates whether or not the\nfirst hint in the list should be selected by default."}),"\n",(0,r.jsx)(n.li,{children:"handleWideResults, a boolean (or undefined) that indicates whether\nto allow result string to stretch width of display."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"If the array of\nhints is empty, then the manager will render an empty list, but the\nhinting session will remain open and the value of the selectInitial\nproperty is irrelevant."}),"\n",(0,r.jsx)(n.p,{children:"Alternatively, the provider may return a jQuery.Deferred object\nthat resolves with an object with the structure described above. In\nthis case, the manager will initially render the hint list window with\na throbber and will render the actual list once the deferred object\nresolves to a response object. If a hint list has already been rendered\n(from an earlier call to getHints), then the old list will continue\nto be displayed until the new deferred has resolved."}),"\n",(0,r.jsx)(n.p,{children:"Both the manager and the provider can reject the deferred object. The\nmanager will reject the deferred if the editor changes state (e.g., the\nuser types a character) or if the hinting session ends (e.g., the user\nexplicitly closes the hints by pressing escape). The provider can use\nthis event to, e.g., abort an expensive computation. Consequently, the\nprovider may assume that getHints will not be called again until the\ndeferred object from the current call has resolved or been rejected. If\nthe provider rejects the deferred, the manager will end the hinting\nsession."}),"\n",(0,r.jsx)(n.p,{children:"The getHints method may be called by the manager repeatedly during a\nhinting session. Providers may wish to cache information for efficiency\nthat may be useful throughout these sessions. The same editor context\nwill be used throughout a session, and will only change during the\nsession as a result of single-character insertions, deletions and\ncursor navigations. The provider may assume that, throughout the\nlifetime of the session, the getHints method will be called exactly\nonce for each such editor change. Consequently, the provider may also\nassume that the document will not be changed outside of the editor\nduring a session."}),"\n",(0,r.jsxs)(n.p,{children:["param ",String," implicitChar\nEither null, if the request to update the hint list was a result of\nnavigation, or a single character that represents the last insertion."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"    return {jQuery.Deferred|{\n         hints: Array.<string|jQueryObject>,\n         match: string,\n         selectInitial: boolean,\n         handleWideResults: boolean}}\n"})}),"\n",(0,r.jsx)(n.p,{children:"Null if the provider wishes to end the hinting session. Otherwise, a\nresponse object, possibly deferred, that provides 1. a sorted array\nhints that consists either of strings or jQuery objects; 2. a string\nmatch, possibly null, that is used by the manager to emphasize\nmatching substrings when rendering the hint list; and 3. a boolean that\nindicates whether the first result, if one exists, should be selected\nby default in the hint list window. If match is non-null, then the\nhints should be strings."}),"\n",(0,r.jsx)(n.p,{children:"If the match is null, the manager will not\nattempt to emphasize any parts of the hints when rendering the hint\nlist; instead the provider may return strings or jQuery objects for\nwhich emphasis is self-contained. For example, the strings may contain\nsubstrings that wrapped in bold tags. In this way, the provider can\nchoose to let the manager handle emphasis for the simple and common case\nof prefix matching, or can provide its own emphasis if it wishes to use\na more sophisticated matching algorithm."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"__CodeHintProvider.insertHint(hint)__\n"})}),"\n",(0,r.jsx)(n.p,{children:"The method by which a provider inserts a hint into the editor context\nassociated with the current session. The provider may assume that the\ngiven hint was returned by the provider in some previous call in the\ncurrent session to getHints, but not necessarily the most recent call.\nAfter the insertion has been performed, the current hinting session is\nclosed. The provider should return a boolean value to indicate whether\nor not the end of the session should be immediately followed by a new\nexplicit hinting request, which may result in a new hinting session\nbeing opened with some provider, but not necessarily the current one."}),"\n",(0,r.jsxs)(n.p,{children:["param ",String," hint\nThe hint to be inserted into the editor context for the current session."]}),"\n",(0,r.jsxs)(n.p,{children:["return ",Boolean,"\nIndicates whether the manager should follow hint insertion with an\nexplicit hint request."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"CodeHintProvider.insertHintOnTab"})}),"\n",(0,r.jsxs)(n.p,{children:["type ",Boolean," insertHintOnTab\nIndicates whether the CodeHintManager should request that the provider of\nthe current session insert the currently selected hint on tab key events,\nor if instead a tab character should be inserted into the editor. If omitted,\nthe fallback behavior is determined by the CodeHintManager. The default\nbehavior is to insert a tab character, but this can be changed with the\ninsertHintOnTab Preference."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#module_CodeHintManager",children:"CodeHintManager"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#module_CodeHintManager..registerHintProvider",children:".registerHintProvider(provider, languageIds, priority)"})}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#module_CodeHintManager..hasValidExclusion",children:".hasValidExclusion(exclusion, textAfterCursor)"})," \u21d2 ",(0,r.jsx)("code",{children:"boolean"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#module_CodeHintManager..isOpen",children:".isOpen()"})," \u21d2 ",(0,r.jsx)("code",{children:"boolean"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)("a",{name:"module_CodeHintManager..registerHintProvider"}),"\n",(0,r.jsx)(n.h3,{id:"codehintmanagerregisterhintproviderprovider-languageids-priority",children:"CodeHintManager.registerHintProvider(provider, languageIds, priority)"}),"\n",(0,r.jsx)(n.p,{children:"The method by which a CodeHintProvider registers its willingness to\nproviding hints for editors in a given language."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Kind"}),": inner method of ",(0,r.jsx)(n.a,{href:"#module_CodeHintManager",children:(0,r.jsx)("code",{children:"CodeHintManager"})})]}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Param"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"provider"}),(0,r.jsx)(n.td,{children:(0,r.jsx)("code",{children:"CodeHintProvider"})}),(0,r.jsx)(n.td,{children:"The hint provider to be registered, described below."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"languageIds"}),(0,r.jsx)(n.td,{children:(0,r.jsx)("code",{children:"Array.<string>"})}),(0,r.jsx)(n.td,{children:'The set of language ids for which the provider is capable of providing hints. If the special language id name "all" is included then the provider may be called for any language.'})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"priority"}),(0,r.jsx)(n.td,{children:(0,r.jsx)("code",{children:"number"})}),(0,r.jsx)(n.td,{children:"Used to break ties among hint providers for a particular language. Providers with a higher number will be asked for hints before those with a lower priority value. Defaults to zero."})]})]})]}),"\n",(0,r.jsx)("a",{name:"module_CodeHintManager..hasValidExclusion"}),"\n",(0,r.jsxs)(n.h3,{id:"codehintmanagerhasvalidexclusionexclusion-textaftercursor--boolean",children:["CodeHintManager.hasValidExclusion(exclusion, textAfterCursor) \u21d2 ",(0,r.jsx)("code",{children:"boolean"})]}),"\n",(0,r.jsx)(n.p,{children:"Test whether the provider has an exclusion that is still the same as text after the cursor."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Kind"}),": inner method of ",(0,r.jsx)(n.a,{href:"#module_CodeHintManager",children:(0,r.jsx)("code",{children:"CodeHintManager"})}),(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.strong,{children:"Returns"}),": ",(0,r.jsx)("code",{children:"boolean"})," - true if the exclusion is not null and is exactly the same as textAfterCursor,\nfalse otherwise."]}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Param"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"exclusion"}),(0,r.jsx)(n.td,{children:(0,r.jsx)("code",{children:"string"})}),(0,r.jsx)(n.td,{children:"Text not to be overwritten when the provider inserts the selected hint."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"textAfterCursor"}),(0,r.jsx)(n.td,{children:(0,r.jsx)("code",{children:"string"})}),(0,r.jsx)(n.td,{children:"Text that is immediately after the cursor position."})]})]})]}),"\n",(0,r.jsx)("a",{name:"module_CodeHintManager..isOpen"}),"\n",(0,r.jsxs)(n.h3,{id:"codehintmanagerisopen--boolean",children:["CodeHintManager.isOpen() \u21d2 ",(0,r.jsx)("code",{children:"boolean"})]}),"\n",(0,r.jsx)(n.p,{children:"Test if a hint popup is open."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Kind"}),": inner method of ",(0,r.jsx)(n.a,{href:"#module_CodeHintManager",children:(0,r.jsx)("code",{children:"CodeHintManager"})}),(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.strong,{children:"Returns"}),": ",(0,r.jsx)("code",{children:"boolean"})," - - true if the hints are open, false otherwise."]})]})}function c(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var i=t(96540);const r={},s=i.createContext(r);function o(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);