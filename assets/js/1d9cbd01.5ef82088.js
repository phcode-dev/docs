"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7371],{33649:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>x,frontMatter:()=>r,metadata:()=>c,toc:()=>o});var i=t(74848),s=t(28453);const r={},a=void 0,c={id:"API-Reference/utils/ExtensionInterface",title:"ExtensionInterface",description:"Import :",source:"@site/api/API-Reference/utils/ExtensionInterface.md",sourceDirName:"API-Reference/utils",slug:"/API-Reference/utils/ExtensionInterface",permalink:"/api/API-Reference/utils/ExtensionInterface",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"EventManager",permalink:"/api/API-Reference/utils/EventManager"},next:{title:"ExtensionLoader",permalink:"/api/API-Reference/utils/ExtensionLoader"}},l={},o=[{value:"Import :",id:"import-",level:3},{value:"utils/ExtensionInterface",id:"utilsextensioninterface",level:2},{value:"Usage",id:"usage",level:2},{value:"utils/ExtensionInterface.registerExtensionInterface(extensionInterfaceName, interfaceObject) : <code>function</code>",id:"utilsextensioninterfaceregisterextensioninterfaceextensioninterfacename-interfaceobject--function",level:3},{value:"utils/ExtensionInterface.isExistsExtensionInterface(extensionInterfaceName) \u21d2 <code>boolean</code>",id:"utilsextensioninterfaceisexistsextensioninterfaceextensioninterfacename--boolean",level:3},{value:"utils/ExtensionInterface.waitAndGetExtensionInterface(extensionInterfaceName) \u21d2 <code>Promise</code>",id:"utilsextensioninterfacewaitandgetextensioninterfaceextensioninterfacename--promise",level:3}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h3,{id:"import-",children:"Import :"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'const ExtensionInterface = brackets.getModule("utils/ExtensionInterface")\n'})}),"\n",(0,i.jsx)("a",{name:"module_utils/ExtensionInterface"}),"\n",(0,i.jsx)(n.h2,{id:"utilsextensioninterface",children:"utils/ExtensionInterface"}),"\n",(0,i.jsxs)(n.p,{children:["ExtensionInterface defines utility methods for communicating between extensions safely.\rA global ",(0,i.jsx)(n.code,{children:"window.ExtensionInterface"})," object is made available in phoenix that can be called anytime after AppStart."]}),"\n",(0,i.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,i.jsxs)(n.p,{children:["For Eg. You may have two extensions installed say ",(0,i.jsx)(n.code,{children:"angular"})," extension which has to call functions made available by\r",(0,i.jsx)(n.code,{children:"angular-cli"})," Extension."]}),"\n",(0,i.jsxs)(n.p,{children:["For Making this possible, the ",(0,i.jsx)(n.code,{children:"angular-cli"})," extension makes a named interface available with the ExtensionInterface\rmodule and ",(0,i.jsx)(n.code,{children:"angular"})," extension can get hold of the interface as and when the extension gets loaded."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'// in angular-cli extension, make a file say cli-interface.js module within the extension, do the following:\rconst ExtensionInterface = brackets.getModule("utils/ExtensionInterface"),\r// You can replace exports with any object you want to expose outside the extension really.\rExtensionInterface.registerExtensionInterface("angularCli", exports);\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Once the interface is registered, the angular extension can get hold of the interface with the following code\r(inside or outside the extension) by using:\n",(0,i.jsx)(n.strong,{children:"Example"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'let angularCli;\rExtensionInterface.waitAndGetExtensionInterface("angularCli").then(interfaceObj=> angularCli = interfaceObj);\rif(angularCli){ // check if angular cli is avilable\rangularCli.callSomeFunction();\r}\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Note"})," that the ",(0,i.jsx)(n.code,{children:"angularCli"})," interface is async populated as and when the cli extension is loaded and the\rinterface made available."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"NBB:"})," Do Not use ",(0,i.jsx)(n.code,{children:"await waitAndGetExtensionInterface"})," on tol level require as the module loading might fail."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#module_utils/ExtensionInterface",children:"utils/ExtensionInterface"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#module_utils/ExtensionInterface..registerExtensionInterface",children:".registerExtensionInterface(extensionInterfaceName, interfaceObject)"})," : ",(0,i.jsx)("code",{children:"function"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#module_utils/ExtensionInterface..isExistsExtensionInterface",children:".isExistsExtensionInterface(extensionInterfaceName)"})," \u21d2 ",(0,i.jsx)("code",{children:"boolean"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#module_utils/ExtensionInterface..waitAndGetExtensionInterface",children:".waitAndGetExtensionInterface(extensionInterfaceName)"})," \u21d2 ",(0,i.jsx)("code",{children:"Promise"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)("a",{name:"module_utils/ExtensionInterface..registerExtensionInterface"}),"\n",(0,i.jsxs)(n.h3,{id:"utilsextensioninterfaceregisterextensioninterfaceextensioninterfacename-interfaceobject--function",children:["utils/ExtensionInterface.registerExtensionInterface(extensionInterfaceName, interfaceObject) : ",(0,i.jsx)("code",{children:"function"})]}),"\n",(0,i.jsx)(n.p,{children:"Registers a named extension interface. Will overwrite if an interface of the same name is already present."}),"\n",(0,i.jsxs)(n.p,{children:["To register an interface ",(0,i.jsx)(n.code,{children:"angularCli"}),'\rExtensionInterface.registerExtensionInterface("angularCli", exports);']}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Kind"}),": inner method of ",(0,i.jsx)(n.a,{href:"#module_utils/ExtensionInterface",children:(0,i.jsx)("code",{children:"utils/ExtensionInterface"})})]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Param"}),(0,i.jsx)(n.th,{children:"Type"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"extensionInterfaceName"}),(0,i.jsx)(n.td,{children:(0,i.jsx)("code",{children:"string"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"interfaceObject"}),(0,i.jsx)(n.td,{children:(0,i.jsx)("code",{children:"Object"})})]})]})]}),"\n",(0,i.jsx)("a",{name:"module_utils/ExtensionInterface..isExistsExtensionInterface"}),"\n",(0,i.jsxs)(n.h3,{id:"utilsextensioninterfaceisexistsextensioninterfaceextensioninterfacename--boolean",children:["utils/ExtensionInterface.isExistsExtensionInterface(extensionInterfaceName) \u21d2 ",(0,i.jsx)("code",{children:"boolean"})]}),"\n",(0,i.jsx)(n.p,{children:"Returns true is an interface of the given name exists."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Kind"}),": inner method of ",(0,i.jsx)(n.a,{href:"#module_utils/ExtensionInterface",children:(0,i.jsx)("code",{children:"utils/ExtensionInterface"})})]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Param"}),(0,i.jsx)(n.th,{children:"Type"})]})}),(0,i.jsx)(n.tbody,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"extensionInterfaceName"}),(0,i.jsx)(n.td,{children:(0,i.jsx)("code",{children:"string"})})]})})]}),"\n",(0,i.jsx)("a",{name:"module_utils/ExtensionInterface..waitAndGetExtensionInterface"}),"\n",(0,i.jsxs)(n.h3,{id:"utilsextensioninterfacewaitandgetextensioninterfaceextensioninterfacename--promise",children:["utils/ExtensionInterface.waitAndGetExtensionInterface(extensionInterfaceName) \u21d2 ",(0,i.jsx)("code",{children:"Promise"})]}),"\n",(0,i.jsx)(n.p,{children:"Returns a promise that gets resolved only when an ExtensionInterface of the given name is registered. Use this\rgetter to get hold of extensions interface predictably."}),"\n",(0,i.jsxs)(n.p,{children:["To get a registered interface ",(0,i.jsx)(n.code,{children:"angularCli"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'let angularCli;\rExtensionInterface.waitAndGetExtensionInterface("angularCli").then(interfaceObj=> angularCli = interfaceObj);\rif(angularCli){ // check if angular cli is avilable\rangularCli.callSomeFunction();\r}\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Kind"}),": inner method of ",(0,i.jsx)(n.a,{href:"#module_utils/ExtensionInterface",children:(0,i.jsx)("code",{children:"utils/ExtensionInterface"})})]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsx)(n.tr,{children:(0,i.jsx)(n.th,{children:"Param"})})}),(0,i.jsx)(n.tbody,{children:(0,i.jsx)(n.tr,{children:(0,i.jsx)(n.td,{children:"extensionInterfaceName"})})})]})]})}function x(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>c});var i=t(96540);const s={},r=i.createContext(s);function a(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);