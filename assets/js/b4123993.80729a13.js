"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7612],{63665:(e,i,r)=>{r.r(i),r.d(i,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>n,metadata:()=>s,toc:()=>l});var t=r(74848),a=r(28453);const n={},o=void 0,s={id:"API-Reference/features/BeautificationManager",title:"BeautificationManager",description:"Import :",source:"@site/api/API-Reference/features/BeautificationManager.md",sourceDirName:"API-Reference/features",slug:"/API-Reference/features/BeautificationManager",permalink:"/api/API-Reference/features/BeautificationManager",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"EditorManager",permalink:"/api/API-Reference/editor/EditorManager"},next:{title:"NewFileContentManager",permalink:"/api/API-Reference/features/NewFileContentManager"}},d={},l=[{value:"Import :",id:"import-",level:3},{value:"features/BeautificationManager",id:"featuresbeautificationmanager",level:2},{value:"API",id:"api",level:2},{value:"registerBeautificationProvider",id:"registerbeautificationprovider",level:3},{value:"removeBeautificationProvider",id:"removebeautificationprovider",level:3},{value:"provider.beautifyEditorProvider",id:"providerbeautifyeditorprovider",level:3},{value:"The resolved promise object",id:"the-resolved-promise-object",level:4},{value:"provider.beautifyTextProvider",id:"providerbeautifytextprovider",level:3},{value:"Parameters",id:"parameters",level:4},{value:"The resolved promise object",id:"the-resolved-promise-object-1",level:4},{value:"features/BeautificationManager.beautifyEditor(editor) \u21d2 <code>Promise</code>",id:"featuresbeautificationmanagerbeautifyeditoreditor--promise",level:3},{value:"features/BeautificationManager.beautifyText(textToBeautify, filePathOrFileName) \u21d2 <code>Promise</code>",id:"featuresbeautificationmanagerbeautifytexttexttobeautify-filepathorfilename--promise",level:3},{value:"The resolved promise object",id:"the-resolved-promise-object-2",level:4}];function c(e){const i={a:"a",br:"br",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.h3,{id:"import-",children:"Import :"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-js",children:'const BeautificationManager = brackets.getModule("features/BeautificationManager")\n'})}),"\n",(0,t.jsx)("a",{name:"module_features/BeautificationManager"}),"\n",(0,t.jsx)(i.h2,{id:"featuresbeautificationmanager",children:"features/BeautificationManager"}),"\n",(0,t.jsxs)(i.p,{children:["Beautification manager interacts with beautify extensions to determine what to do when user issues ",(0,t.jsx)(i.code,{children:"beautify code"}),"\rcommand. Beautification providers can use this module to register new providers to beautify new languages."]}),"\n",(0,t.jsx)(i.h2,{id:"api",children:"API"}),"\n",(0,t.jsx)(i.h3,{id:"registerbeautificationprovider",children:"registerBeautificationProvider"}),"\n",(0,t.jsx)(i.p,{children:"Register a Beautification provider with this api."}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.strong,{children:"Example"})}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-js",children:"// syntax\rBeautificationManager.registerBeautificationProvider(provider, supportedLanguages, priority);\n"})}),"\n",(0,t.jsx)(i.p,{children:"The API requires three parameters:"}),"\n",(0,t.jsxs)(i.ol,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"provider"}),": must implement a  ",(0,t.jsx)(i.code,{children:"beautifyEditorProvider"})," and ",(0,t.jsx)(i.code,{children:"beautifyTextProvider"})," function. See doc below:"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"supportedLanguages"}),": An array of languages that the provider supports. If ",(0,t.jsx)(i.code,{children:'["all"]'})," is supplied, then the\rprovider will be invoked for all languages. Restrict to specific languages: Eg: ",(0,t.jsx)(i.code,{children:'["javascript", "html", "php"]'})]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"priority"}),": Used to break ties among providers for a particular language. Providers with a higher number\rwill be asked for beatified code before those with a lower priority value. Defaults to zero.\n",(0,t.jsx)(i.strong,{children:"Example"})]}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-js",children:'// to register a provider that will be invoked for all languages. where provider is any object that implements\r// a `beautifyEditorProvider` and `beautifyTextProvider` function\rBeautificationManager.registerBeautificationProvider(provider, ["all"]);\r\r// to register a provider that will be invoked for specific languages\rBeautificationManager.registerBeautificationProvider(provider, ["javascript", "html", "php"]);\n'})}),"\n",(0,t.jsx)(i.h3,{id:"removebeautificationprovider",children:"removeBeautificationProvider"}),"\n",(0,t.jsxs)(i.p,{children:["Removes a registered Beautification provider. The API takes the same arguments as ",(0,t.jsx)(i.code,{children:"registerBeautificationProvider"}),".\n",(0,t.jsx)(i.strong,{children:"Example"})]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-js",children:'// syntax\rBeautificationManager.removeBeautificationProvider(provider, supportedLanguages);\r// Example\rBeautificationManager.removeBeautificationProvider(provider, ["javascript", "html"]);\n'})}),"\n",(0,t.jsx)(i.h3,{id:"providerbeautifyeditorprovider",children:"provider.beautifyEditorProvider"}),"\n",(0,t.jsxs)(i.p,{children:["Each provider must implement the ",(0,t.jsx)(i.code,{children:"beautifyEditorProvider"})," function that returns a promise. The promise either resolves with\rthe beautified code details or rejects if there is nothing to beautify for the provider.\n",(0,t.jsx)(i.strong,{children:"Example"})]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-js",children:'// function signature\rprovider.beautifyEditorProvider = function(editor) {\r        return new Promise((resolve, reject)=>{\r            resolve({\r                originalText: "the original text sent to beautify",\r                changedText: "partial or full text that changed.",\r                // Optional cursor offset if given will set the editor cursor to the position after beautification.\r                // either `cursorOffset` or `ranges` can be specified, but not both.\r                cursorOffset: number,\r                // Optional: If range is specified, only the given range will be replaced. else full text is replaced\r                ranges:{\r                    replaceStart: {line,ch},\r                    replaceEnd: {line,ch}\r                }\r            });\r        });\r    };\n'})}),"\n",(0,t.jsx)(i.h4,{id:"the-resolved-promise-object",children:"The resolved promise object"}),"\n",(0,t.jsxs)(i.p,{children:["The resolved promise should either be ",(0,t.jsx)(i.code,{children:"null"}),"(indicating that the extension itself has prettified the code and\rdoesn't want any further processing from BeautificationManager.) or contain the following details:"]}),"\n",(0,t.jsxs)(i.ol,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"originalText"})," - string, the original text sent to beautify"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"changedText"})," - string, this should be the fully prettified text of the whole ",(0,t.jsx)(i.code,{children:"originalText"})," or a fragment of\rpretty text in ",(0,t.jsx)(i.code,{children:"originalText"})," if a range was selected. If a ",(0,t.jsx)(i.code,{children:"fragment"})," is returned, then the\r",(0,t.jsx)(i.code,{children:"ranges"})," object must be specified."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"cursorOffset"})," - Optional number, if given will set the editor cursor to the position after beautification.\reither ",(0,t.jsx)(i.code,{children:"cursorOffset"})," or ",(0,t.jsx)(i.code,{children:"ranges"})," can be specified, but not both."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"ranges"})," - Optional object, set of 2 cursors that gives details on what range to replace with given changed text.\rIf range is not specified, the full text in the editor will be replaced. range has 2 fields:","\n",(0,t.jsxs)(i.ol,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"replaceStart{line,ch}"})," - the start of range to replace"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"replaceEnd{line,ch}"})," - the end of range to replace"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(i.h3,{id:"providerbeautifytextprovider",children:"provider.beautifyTextProvider"}),"\n",(0,t.jsxs)(i.p,{children:["Each provider must implement the ",(0,t.jsx)(i.code,{children:"beautifyTextProvider"})," function that returns a promise.\rThe promise either resolves with the beautified code details(same as beautifyEditorProvider) or rejects if\rthere is nothing to beautify for the provider.\n",(0,t.jsx)(i.strong,{children:"Example"})]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-js",children:'// function signature.\rprovider.beautifyTextProvider = function(textToBeautify, filePathOrFileName) {\r        return new Promise((resolve, reject)=>{\r            resolve({\r                originalText: "the original text sent to beautify",\r                changedText: "partial or full text that changed.",\r                // Optional: If range is specified, only the given range is assumed changed. else full text changed.\r                ranges:{\r                    replaceStart: {line,ch},\r                    replaceEnd: {line,ch}\r                }\r            });\r        });\r    };\n'})}),"\n",(0,t.jsx)(i.h4,{id:"parameters",children:"Parameters"}),"\n",(0,t.jsxs)(i.p,{children:["The ",(0,t.jsx)(i.code,{children:"beautifyTextProvider"})," callback will receive the following arguments."]}),"\n",(0,t.jsxs)(i.ol,{children:["\n",(0,t.jsx)(i.li,{children:"textToBeautify - string"}),"\n",(0,t.jsx)(i.li,{children:"filePathOrFileName - string. This will either be a valid file path, or a file name to deduce which language the\rbeautifier is dealing with."}),"\n"]}),"\n",(0,t.jsx)(i.h4,{id:"the-resolved-promise-object-1",children:"The resolved promise object"}),"\n",(0,t.jsx)(i.p,{children:"The resolved object has the same structure as beautifyEditorProvider resolved promise object."}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.a,{href:"#module_features/BeautificationManager",children:"features/BeautificationManager"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.a,{href:"#module_features/BeautificationManager..beautifyEditor",children:".beautifyEditor(editor)"})," \u21d2 ",(0,t.jsx)("code",{children:"Promise"})]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.a,{href:"#module_features/BeautificationManager..beautifyText",children:".beautifyText(textToBeautify, filePathOrFileName)"})," \u21d2 ",(0,t.jsx)("code",{children:"Promise"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)("a",{name:"module_features/BeautificationManager..beautifyEditor"}),"\n",(0,t.jsxs)(i.h3,{id:"featuresbeautificationmanagerbeautifyeditoreditor--promise",children:["features/BeautificationManager.beautifyEditor(editor) \u21d2 ",(0,t.jsx)("code",{children:"Promise"})]}),"\n",(0,t.jsx)(i.p,{children:"Beautifies text in the given editor with available providers."}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.strong,{children:"Kind"}),": inner method of ",(0,t.jsx)(i.a,{href:"#module_features/BeautificationManager",children:(0,t.jsx)("code",{children:"features/BeautificationManager"})}),(0,t.jsx)(i.br,{}),"\n",(0,t.jsx)(i.strong,{children:"Returns"}),": ",(0,t.jsx)("code",{children:"Promise"})," - - A promise that will be resolved to null if the selected text is beautified or rejects\rif beautification failed."]}),"\n",(0,t.jsxs)(i.table,{children:[(0,t.jsx)(i.thead,{children:(0,t.jsx)(i.tr,{children:(0,t.jsx)(i.th,{children:"Param"})})}),(0,t.jsx)(i.tbody,{children:(0,t.jsx)(i.tr,{children:(0,t.jsx)(i.td,{children:"editor"})})})]}),"\n",(0,t.jsx)("a",{name:"module_features/BeautificationManager..beautifyText"}),"\n",(0,t.jsxs)(i.h3,{id:"featuresbeautificationmanagerbeautifytexttexttobeautify-filepathorfilename--promise",children:["features/BeautificationManager.beautifyText(textToBeautify, filePathOrFileName) \u21d2 ",(0,t.jsx)("code",{children:"Promise"})]}),"\n",(0,t.jsx)(i.p,{children:"Beautifies text with available providers."}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.strong,{children:"Kind"}),": inner method of ",(0,t.jsx)(i.a,{href:"#module_features/BeautificationManager",children:(0,t.jsx)("code",{children:"features/BeautificationManager"})}),(0,t.jsx)(i.br,{}),"\n",(0,t.jsx)(i.strong,{children:"Returns"}),": ",(0,t.jsx)("code",{children:"Promise"})," - - A promise that will be resolved to null if the selected text is beautified or rejects\rif beautification failed.."]}),"\n",(0,t.jsx)(i.h4,{id:"the-resolved-promise-object-2",children:"The resolved promise object"}),"\n",(0,t.jsx)(i.p,{children:"The resolved promise object contain the following details:"}),"\n",(0,t.jsxs)(i.ol,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"originalText"})," - string, the original text sent to beautify"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"changedText"})," - string, the prettified text."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"ranges"})," - Optional. if range object is returned, it means that only a part of the original text changed in\rthe original text ",(0,t.jsx)(i.code,{children:"textToBeautify"}),". The part that changed is supplied by two cursor positions below:","\n",(0,t.jsxs)(i.ol,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"replaceStart{line,ch}"})," - the start of range to replace"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"replaceEnd{line,ch}"})," - the end of range to replace"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(i.table,{children:[(0,t.jsx)(i.thead,{children:(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.th,{children:"Param"}),(0,t.jsx)(i.th,{children:"Type"}),(0,t.jsx)(i.th,{children:"Description"})]})}),(0,t.jsxs)(i.tbody,{children:[(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"textToBeautify"}),(0,t.jsx)(i.td,{children:(0,t.jsx)("code",{children:"string"})}),(0,t.jsx)(i.td,{})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"filePathOrFileName"}),(0,t.jsx)(i.td,{children:(0,t.jsx)("code",{children:"string"})}),(0,t.jsx)(i.td,{children:"Note that the file path may not actually exist on disk. It is just used to infer what language beautifier is to be applied."})]})]})]})]})}function h(e={}){const{wrapper:i}={...(0,a.R)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},28453:(e,i,r)=>{r.d(i,{R:()=>o,x:()=>s});var t=r(96540);const a={},n=t.createContext(a);function o(e){const i=t.useContext(n);return t.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function s(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),t.createElement(n.Provider,{value:i},e.children)}}}]);