"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3180],{52807:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>a,frontMatter:()=>r,metadata:()=>d,toc:()=>o});const d=JSON.parse('{"id":"API-Reference/language/HTMLSimpleDOM","title":"HTMLSimpleDOM","description":"Import :","source":"@site/api/API-Reference/language/HTMLSimpleDOM.md","sourceDirName":"API-Reference/language","slug":"/API-Reference/language/HTMLSimpleDOM","permalink":"/api/API-Reference/language/HTMLSimpleDOM","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"HTMLDOMDiff","permalink":"/api/API-Reference/language/HTMLDOMDiff"},"next":{"title":"HTMLUtils","permalink":"/api/API-Reference/language/HTMLUtils"}}');var t=i(74848),s=i(28453);const r={},l=void 0,c={},o=[{value:"Import :",id:"import-",level:3},{value:"SimpleNode",id:"simplenode",level:2},{value:"new SimpleNode(properties)",id:"new-simplenodeproperties",level:3},{value:"simpleNode.update()",id:"simplenodeupdate",level:3},{value:"simpleNode.updateAttributeSignature()",id:"simplenodeupdateattributesignature",level:3},{value:"simpleNode.isElement() \u21d2 <code>bool</code>",id:"simplenodeiselement--bool",level:3},{value:"simpleNode.isText() \u21d2 <code>bool</code>",id:"simplenodeistext--bool",level:3},{value:"Builder",id:"builder",level:2},{value:"new Builder(text, startOffset, startOffsetPos)",id:"new-buildertext-startoffset-startoffsetpos",level:3},{value:"builder.getID \u21d2 <code>int</code>",id:"buildergetid--int",level:3},{value:"builder.build(strict, markCache) \u21d2 <code>SimpleNode</code>",id:"builderbuildstrict-markcache--simplenode",level:3},{value:"builder.getNewID() \u21d2 <code>int</code>",id:"buildergetnewid--int",level:3},{value:"build(text, strict) \u21d2 <code>SimpleNode</code>",id:"buildtext-strict--simplenode",level:2}];function h(e){const n={a:"a",br:"br",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h3,{id:"import-",children:"Import :"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'const HTMLSimpleDOM = brackets.getModule("language/HTMLSimpleDOM")\n'})}),"\n",(0,t.jsx)("a",{name:"SimpleNode"}),"\n",(0,t.jsx)(n.h2,{id:"simplenode",children:"SimpleNode"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Kind"}),": global class"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"#SimpleNode",children:"SimpleNode"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#new_SimpleNode_new",children:"new SimpleNode(properties)"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#SimpleNode+update",children:".update()"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#SimpleNode+updateAttributeSignature",children:".updateAttributeSignature()"})}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"#SimpleNode+isElement",children:".isElement()"})," \u21d2 ",(0,t.jsx)("code",{children:"bool"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"#SimpleNode+isText",children:".isText()"})," \u21d2 ",(0,t.jsx)("code",{children:"bool"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)("a",{name:"new_SimpleNode_new"}),"\n",(0,t.jsx)(n.h3,{id:"new-simplenodeproperties",children:"new SimpleNode(properties)"}),"\n",(0,t.jsxs)(n.p,{children:["A SimpleNode represents one node in a SimpleDOM tree. Each node can have\nany set of properties on it, though there are a couple of assumptions made.\nElements will have ",(0,t.jsx)(n.code,{children:"children"})," and ",(0,t.jsx)(n.code,{children:"attributes"})," properties. Text nodes will have a ",(0,t.jsx)(n.code,{children:"content"}),"\nproperty. All Elements will have a ",(0,t.jsx)(n.code,{children:"tagID"})," and text nodes ",(0,t.jsx)(n.em,{children:"can"})," have one."]}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Param"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsx)(n.tbody,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"properties"}),(0,t.jsx)(n.td,{children:(0,t.jsx)("code",{children:"Object"})}),(0,t.jsx)(n.td,{children:"the properties provided will be set on the new object."})]})})]}),"\n",(0,t.jsx)("a",{name:"SimpleNode+update"}),"\n",(0,t.jsx)(n.h3,{id:"simplenodeupdate",children:"simpleNode.update()"}),"\n",(0,t.jsx)(n.p,{children:"Updates signatures used to optimize the number of comparisons done during\ndiffing. This is important to call if you change:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"children"}),"\n",(0,t.jsx)(n.li,{children:"child node attributes"}),"\n",(0,t.jsx)(n.li,{children:"text content of a text node"}),"\n",(0,t.jsx)(n.li,{children:"child node text"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Kind"}),": instance method of ",(0,t.jsx)(n.a,{href:"#SimpleNode",children:(0,t.jsx)("code",{children:"SimpleNode"})})]}),"\n",(0,t.jsx)("a",{name:"SimpleNode+updateAttributeSignature"}),"\n",(0,t.jsx)(n.h3,{id:"simplenodeupdateattributesignature",children:"simpleNode.updateAttributeSignature()"}),"\n",(0,t.jsx)(n.p,{children:"Updates the signature of this node's attributes. Call this after making attribute changes."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Kind"}),": instance method of ",(0,t.jsx)(n.a,{href:"#SimpleNode",children:(0,t.jsx)("code",{children:"SimpleNode"})})]}),"\n",(0,t.jsx)("a",{name:"SimpleNode+isElement"}),"\n",(0,t.jsxs)(n.h3,{id:"simplenodeiselement--bool",children:["simpleNode.isElement() \u21d2 ",(0,t.jsx)("code",{children:"bool"})]}),"\n",(0,t.jsx)(n.p,{children:"Is this node an element node?"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Kind"}),": instance method of ",(0,t.jsx)(n.a,{href:"#SimpleNode",children:(0,t.jsx)("code",{children:"SimpleNode"})}),(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.strong,{children:"Returns"}),": ",(0,t.jsx)("code",{children:"bool"})," - true if it is an element"]}),"\n",(0,t.jsx)("a",{name:"SimpleNode+isText"}),"\n",(0,t.jsxs)(n.h3,{id:"simplenodeistext--bool",children:["simpleNode.isText() \u21d2 ",(0,t.jsx)("code",{children:"bool"})]}),"\n",(0,t.jsx)(n.p,{children:"Is this node a text node?"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Kind"}),": instance method of ",(0,t.jsx)(n.a,{href:"#SimpleNode",children:(0,t.jsx)("code",{children:"SimpleNode"})}),(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.strong,{children:"Returns"}),": ",(0,t.jsx)("code",{children:"bool"})," - true if it is text"]}),"\n",(0,t.jsx)("a",{name:"Builder"}),"\n",(0,t.jsx)(n.h2,{id:"builder",children:"Builder"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Kind"}),": global class"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"#Builder",children:"Builder"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#new_Builder_new",children:"new Builder(text, startOffset, startOffsetPos)"})}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"#Builder+getID",children:".getID"})," \u21d2 ",(0,t.jsx)("code",{children:"int"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"#Builder+build",children:".build(strict, markCache)"})," \u21d2 ",(0,t.jsx)(n.a,{href:"#SimpleNode",children:(0,t.jsx)("code",{children:"SimpleNode"})})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"#Builder+getNewID",children:".getNewID()"})," \u21d2 ",(0,t.jsx)("code",{children:"int"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)("a",{name:"new_Builder_new"}),"\n",(0,t.jsx)(n.h3,{id:"new-buildertext-startoffset-startoffsetpos",children:"new Builder(text, startOffset, startOffsetPos)"}),"\n",(0,t.jsx)(n.p,{children:'A Builder creates a SimpleDOM tree of SimpleNode objects representing the\n"important" contents of an HTML document. It does not include things like comments.\nThe nodes include information about their position in the text provided.'}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Param"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"text"}),(0,t.jsx)(n.td,{children:(0,t.jsx)("code",{children:"string"})}),(0,t.jsx)(n.td,{children:"The text to parse"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"startOffset"}),(0,t.jsx)(n.td,{children:(0,t.jsx)("code",{children:"int"})}),(0,t.jsx)(n.td,{children:"starting offset in the text"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"startOffsetPos"}),(0,t.jsx)(n.td,{children:(0,t.jsx)("code",{children:"Object"})}),(0,t.jsx)(n.td,{children:"line/ch position in the text"})]})]})]}),"\n",(0,t.jsx)("a",{name:"Builder+getID"}),"\n",(0,t.jsxs)(n.h3,{id:"buildergetid--int",children:["builder.getID \u21d2 ",(0,t.jsx)("code",{children:"int"})]}),"\n",(0,t.jsxs)(n.p,{children:["Returns the best tag ID for the new tag object given.\nThe default implementation just calls ",(0,t.jsx)(n.code,{children:"getNewID"}),"\nand returns a unique ID."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Kind"}),": instance property of ",(0,t.jsx)(n.a,{href:"#Builder",children:(0,t.jsx)("code",{children:"Builder"})}),(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.strong,{children:"Returns"}),": ",(0,t.jsx)("code",{children:"int"})," - unique tag ID"]}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Param"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsx)(n.tbody,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"newTag"}),(0,t.jsx)(n.td,{children:(0,t.jsx)("code",{children:"Object"})}),(0,t.jsx)(n.td,{children:"tag object to potentially inspect to choose an ID"})]})})]}),"\n",(0,t.jsx)("a",{name:"Builder+build"}),"\n",(0,t.jsxs)(n.h3,{id:"builderbuildstrict-markcache--simplenode",children:["builder.build(strict, markCache) \u21d2 ",(0,t.jsx)(n.a,{href:"#SimpleNode",children:(0,t.jsx)("code",{children:"SimpleNode"})})]}),"\n",(0,t.jsx)(n.p,{children:"Builds the SimpleDOM."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Kind"}),": instance method of ",(0,t.jsx)(n.a,{href:"#Builder",children:(0,t.jsx)("code",{children:"Builder"})}),(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.strong,{children:"Returns"}),": ",(0,t.jsx)(n.a,{href:"#SimpleNode",children:(0,t.jsx)("code",{children:"SimpleNode"})})," - root of tree or null if parsing failed"]}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Param"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"strict"}),(0,t.jsx)(n.td,{children:(0,t.jsx)("code",{children:"bool"})}),(0,t.jsx)(n.td,{children:"if errors are detected, halt and return null"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"markCache"}),(0,t.jsx)(n.td,{children:(0,t.jsx)("code",{children:"Object"})}),(0,t.jsxs)(n.td,{children:["a cache that can be used in ID generation (is passed to ",(0,t.jsx)(n.code,{children:"getID"}),")"]})]})]})]}),"\n",(0,t.jsx)("a",{name:"Builder+getNewID"}),"\n",(0,t.jsxs)(n.h3,{id:"buildergetnewid--int",children:["builder.getNewID() \u21d2 ",(0,t.jsx)("code",{children:"int"})]}),"\n",(0,t.jsx)(n.p,{children:"Returns a new tag ID."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Kind"}),": instance method of ",(0,t.jsx)(n.a,{href:"#Builder",children:(0,t.jsx)("code",{children:"Builder"})}),(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.strong,{children:"Returns"}),": ",(0,t.jsx)("code",{children:"int"})," - unique tag ID"]}),"\n",(0,t.jsx)("a",{name:"build"}),"\n",(0,t.jsxs)(n.h2,{id:"buildtext-strict--simplenode",children:["build(text, strict) \u21d2 ",(0,t.jsx)(n.a,{href:"#SimpleNode",children:(0,t.jsx)("code",{children:"SimpleNode"})})]}),"\n",(0,t.jsxs)(n.p,{children:["Builds a SimpleDOM from the text provided. If ",(0,t.jsx)(n.code,{children:"strict"})," mode is true, parsing\nwill halt as soon as any error is seen and null will be returned."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Kind"}),": global function",(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.strong,{children:"Returns"}),": ",(0,t.jsx)(n.a,{href:"#SimpleNode",children:(0,t.jsx)("code",{children:"SimpleNode"})})," - root of tree or null if strict failed"]}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Param"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"text"}),(0,t.jsx)(n.td,{children:(0,t.jsx)("code",{children:"string"})}),(0,t.jsx)(n.td,{children:"Text of document to parse"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"strict"}),(0,t.jsx)(n.td,{children:(0,t.jsx)("code",{children:"bool"})}),(0,t.jsx)(n.td,{children:"True for strict parsing"})]})]})]})]})}function a(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>l});var d=i(96540);const t={},s=d.createContext(t);function r(e){const n=d.useContext(s);return d.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),d.createElement(s.Provider,{value:n},e.children)}}}]);