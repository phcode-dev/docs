"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[661],{53238:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>a,metadata:()=>d,toc:()=>o});var s=t(74848),r=t(28453);const a={},i=void 0,d={id:"API-Reference/utils/EventManager",title:"EventManager",description:"Import :",source:"@site/api/API-Reference/utils/EventManager.md",sourceDirName:"API-Reference/utils",slug:"/API-Reference/utils/EventManager",permalink:"/api/API-Reference/utils/EventManager",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"EventDispatcher",permalink:"/api/API-Reference/utils/EventDispatcher"},next:{title:"ExtensionInterface",permalink:"/api/API-Reference/utils/ExtensionInterface"}},l={},o=[{value:"Import :",id:"import-",level:3},{value:"utils/EventManager",id:"utilseventmanager",level:2},{value:"Usage",id:"usage",level:2},{value:"utils/EventManager.registerEventHandler(handlerName, eventDispatcher) \u21d2 <code>boolean</code>",id:"utilseventmanagerregistereventhandlerhandlername-eventdispatcher--boolean",level:3},{value:"utils/EventManager.isExistsEventHandler(handlerName) \u21d2 <code>boolean</code>",id:"utilseventmanagerisexistseventhandlerhandlername--boolean",level:3},{value:"utils/EventManager.triggerEvent(handlerName, eventName, ...eventParams) : <code>function</code>",id:"utilseventmanagertriggereventhandlername-eventname-eventparams--function",level:3},{value:"onmessage(event)",id:"onmessageevent",level:2}];function h(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h3,{id:"import-",children:"Import :"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'brackets.getModule("utils/EventManager")\n'})}),"\n",(0,s.jsx)("a",{name:"module_utils/EventManager"}),"\n",(0,s.jsx)(n.h2,{id:"utilseventmanager",children:"utils/EventManager"}),"\n",(0,s.jsxs)(n.p,{children:["The global EventManager can be used to register named EventDispatchers so that events\ncan be triggered from anywhere without using require context. This should also be used to handle custom\n",(0,s.jsx)(n.code,{children:"window.onmessage"})," handlers."]}),"\n",(0,s.jsxs)(n.p,{children:["A global ",(0,s.jsx)(n.code,{children:"window.EventManager"})," object is made available in phoenix that can be called anytime after AppStart."]}),"\n",(0,s.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,s.jsxs)(n.p,{children:["For Eg. Let's say we have an extension ",(0,s.jsx)(n.code,{children:"drawImage"})," installed that wants to expose custom functionality to phoenix.\nThe Extension will first register named EventHandler like this:"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'// in drawImage/someExtensionModule.js module within the extension, do the following:\nconst EventDispatcher = brackets.getModule("utils/EventDispatcher"),\nEventManager = brackets.getModule("utils/EventManager");\nEventDispatcher.makeEventDispatcher(exports);\n\nEventManager.registerEventHandler("drawImage-Handler", exports);\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Once the event handler is registered, we can trigger events on the named handler anywhere in phoenix\n(inside or outside the extension) by using:\n",(0,s.jsx)(n.strong,{children:"Example"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'EventManager.triggerEvent("drawImage-Handler", "someEventName", "param1", "param2", ...);\n'})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"#module_utils/EventManager",children:"utils/EventManager"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"#module_utils/EventManager..registerEventHandler",children:".registerEventHandler(handlerName, eventDispatcher)"})," \u21d2 ",(0,s.jsx)("code",{children:"boolean"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"#module_utils/EventManager..isExistsEventHandler",children:".isExistsEventHandler(handlerName)"})," \u21d2 ",(0,s.jsx)("code",{children:"boolean"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"#module_utils/EventManager..triggerEvent",children:".triggerEvent(handlerName, eventName, ...eventParams)"})," : ",(0,s.jsx)("code",{children:"function"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)("a",{name:"module_utils/EventManager..registerEventHandler"}),"\n",(0,s.jsxs)(n.h3,{id:"utilseventmanagerregistereventhandlerhandlername-eventdispatcher--boolean",children:["utils/EventManager.registerEventHandler(handlerName, eventDispatcher) \u21d2 ",(0,s.jsx)("code",{children:"boolean"})]}),"\n",(0,s.jsxs)(n.p,{children:["Registers a named EventHandler. Event handlers are created using the call:\n",(0,s.jsx)(n.code,{children:"EventDispatcher.makeEventDispatcher(Command.prototype);"})]}),"\n",(0,s.jsx)(n.p,{children:'To register a close dialogue event handler in an extension:\n// in close-dialogue.js module winthin the extension, do the following:\nconst EventDispatcher = brackets.getModule("utils/EventDispatcher"),\nEventDispatcher.makeEventDispatcher(exports);\nconst EventManager = brackets.getModule("utils/EventManager");'}),"\n",(0,s.jsxs)(n.p,{children:["// Note: for event handler names, please change the ",(0,s.jsx)(n.code,{children:"extensionName"})," to your extension name\n// to prevent collisions. EventHandlers starting with ",(0,s.jsx)(n.code,{children:"ph-"})," and ",(0,s.jsx)(n.code,{children:"br-"}),' are reserved as system handlers\n// and not available for use in extensions.\nEventManager.registerEventHandler("',(0,s.jsx)(n.code,{children:"extensionName"}),'-closeDialogueHandler", exports);\n// Once the event handler is registered, see triggerEvent API on how to raise events']}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Kind"}),": inner method of ",(0,s.jsx)(n.a,{href:"#module_utils/EventManager",children:(0,s.jsx)("code",{children:"utils/EventManager"})})]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Param"}),(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"handlerName"}),(0,s.jsx)(n.td,{children:(0,s.jsx)("code",{children:"string"})}),(0,s.jsx)(n.td,{children:"a unique name of the handler."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"eventDispatcher"}),(0,s.jsx)(n.td,{children:(0,s.jsx)("code",{children:"object"})}),(0,s.jsx)(n.td,{children:"An EventDispatcher that will be used to trigger events."})]})]})]}),"\n",(0,s.jsx)("a",{name:"module_utils/EventManager..isExistsEventHandler"}),"\n",(0,s.jsxs)(n.h3,{id:"utilseventmanagerisexistseventhandlerhandlername--boolean",children:["utils/EventManager.isExistsEventHandler(handlerName) \u21d2 ",(0,s.jsx)("code",{children:"boolean"})]}),"\n",(0,s.jsx)(n.p,{children:"Returns true is an EventHandler of the given name exists."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Kind"}),": inner method of ",(0,s.jsx)(n.a,{href:"#module_utils/EventManager",children:(0,s.jsx)("code",{children:"utils/EventManager"})})]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Param"}),(0,s.jsx)(n.th,{children:"Type"})]})}),(0,s.jsx)(n.tbody,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"handlerName"}),(0,s.jsx)(n.td,{children:(0,s.jsx)("code",{children:"string"})})]})})]}),"\n",(0,s.jsx)("a",{name:"module_utils/EventManager..triggerEvent"}),"\n",(0,s.jsxs)(n.h3,{id:"utilseventmanagertriggereventhandlername-eventname-eventparams--function",children:["utils/EventManager.triggerEvent(handlerName, eventName, ...eventParams) : ",(0,s.jsx)("code",{children:"function"})]}),"\n",(0,s.jsx)(n.p,{children:"Triggers an event on the named event handler."}),"\n",(0,s.jsxs)(n.p,{children:["To trigger an event to the ",(0,s.jsx)(n.code,{children:"closeDialogue"}),' event handler registered above\n// anywhere in code, do the following:\nconst EventManager = brackets.getModule("utils/EventManager");\nEventManager.triggerEvent("closeDialogueHandler", "someEvent", "param1", "param2", ...);']}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Kind"}),": inner method of ",(0,s.jsx)(n.a,{href:"#module_utils/EventManager",children:(0,s.jsx)("code",{children:"utils/EventManager"})})]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Param"}),(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"handlerName"}),(0,s.jsx)(n.td,{children:(0,s.jsx)("code",{children:"string"})}),(0,s.jsx)(n.td,{})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"eventName"}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"the event name as recognised by the handler. this is usually a string."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"...eventParams"}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"Can be a comma seperated list of args or a single argument."})]})]})]}),"\n",(0,s.jsx)("a",{name:"onmessage"}),"\n",(0,s.jsx)(n.h2,{id:"onmessageevent",children:"onmessage(event)"}),"\n",(0,s.jsxs)(n.p,{children:["This function acts as a secure event handler for all 'message' events targeted at the window object.\nThis is useful if you have to send/receive messaged from an embedded cross-domain iframe inside phoenix.\n",(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage",children:"https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage"}),"\nInstead of directly overriding window.onmessage, extensions or other elements that need to\nlisten to these events should register their named eventHandler with ",(0,s.jsx)(n.code,{children:"EventManager"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["By default, only origins part of ",(0,s.jsx)(n.code,{children:"window.Phoenix.TRUSTED_ORIGINS"})," are whitelisted. If your extension is\nbringing in a cross-origin ifrmame say [",(0,s.jsx)(n.code,{children:"http://mydomain.com"}),"], you should add it to the whitelist by setting\n",(0,s.jsx)(n.code,{children:'window.Phoenix.TRUSTED_ORIGINS ["http://mydomain.com"] = true;'})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Kind"}),": global function"]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Param"}),(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsx)(n.tbody,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"event"}),(0,s.jsx)(n.td,{children:(0,s.jsx)("code",{children:"MessageEvent"})}),(0,s.jsxs)(n.td,{children:["The 'message' event targeted at the window object. The event's   'data' property should have a 'handlerName' and ",(0,s.jsx)(n.code,{children:"eventName"}),' property that will be triggered in phcode. // We will try to communicate within an embedded iframe and an extension // In your extension in phoenix, register a handlerName to process a new kind of event. const EventDispatcher = brackets.getModule("utils/EventDispatcher"), EventDispatcher.makeEventDispatcher(exports); const EventManager = brackets.getModule("utils/EventManager"); // Note: for event handler names, please change the ',(0,s.jsx)(n.code,{children:"extensionName"})," to your extension name // to prevent collisions. EventHandlers starting with ",(0,s.jsx)(n.code,{children:"ph-"})," and ",(0,s.jsx)(n.code,{children:"br-"}),' are reserved as system handlers // and not available for use in extensions. window.Phoenix.TRUSTED_ORIGINS ["',(0,s.jsx)(n.a,{href:"http://mydomain.com",children:"http://mydomain.com"}),'"]'," = true; ",(0,s.jsx)(n.code,{children:'js EventManager.registerEventHandler("`extensionName`-iframeMessageHandler", exports); exports.on("iframeHelloEvent", function(_ev, event){    console.log(event.data.message); }); '})," // Now from your iframe, send a message to the above event handler using: ",(0,s.jsx)(n.code,{children:'js window.parent.postMessage({     handlerName: "`extensionName`-iframeMessageHandler",     eventName: "iframeHelloEvent",     message: "hello world" }, \'*\'); '})," // ",(0,s.jsx)(n.code,{children:"you should replace * with the trusted domains list in production for security."})," See how this can be // done securely with this example: ",(0,s.jsx)(n.a,{href:"https://github.com/phcode-dev/phcode.live/blob/6d64386fbb9d671cdb64622bc48ffe5f71959bff/docs/virtual-server-loader.js#L43",children:"https://github.com/phcode-dev/phcode.live/blob/6d64386fbb9d671cdb64622bc48ffe5f71959bff/docs/virtual-server-loader.js#L43"})," // Abstract is that, pass in the parentOrigin as a query string parameter in iframe, and validate it against // a trusted domains list in your iframe."]})]})})]})]})}function c(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>d});var s=t(96540);const r={},a=s.createContext(r);function i(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);