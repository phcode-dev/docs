"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3029],{12107:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>r,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"How-To/Panels","title":"How to create Panels","description":"In Phoenix Code, Panels are of two types :- Plugin Panel and Bottom Panel.","source":"@site/api/07-How-To/Panels.md","sourceDirName":"07-How-To","slug":"/How-To/Panels","permalink":"/api/How-To/Panels","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"How to create Panels"},"sidebar":"tutorialSidebar","previous":{"title":"Add Menus, Menu items and Keyboard Shortcuts","permalink":"/api/How-To/Menus"},"next":{"title":"Add an indicator icon on the status bar","permalink":"/api/How-To/StatusBar"}}');var l=a(74848),s=a(28453);const i={title:"How to create Panels"},o=void 0,r={},c=[{value:"Creating a Plugin Panel",id:"creating-a-plugin-panel",level:2},{value:"Managing Plugin Panel State",id:"managing-plugin-panel-state",level:2},{value:"Creating a Bottom Panel",id:"creating-a-bottom-panel",level:2},{value:"Managing Bottom Panel State",id:"managing-bottom-panel-state",level:2},{value:"Best Practices",id:"best-practices",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",hr:"hr",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsxs)(n.p,{children:["In Phoenix Code, Panels are of two types :- ",(0,l.jsx)(n.code,{children:"Plugin Panel"})," and ",(0,l.jsx)(n.code,{children:"Bottom Panel"}),"."]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Plugin Panel"})," appears on the side of the screen, generally the left side. For Example :- ",(0,l.jsx)(n.em,{children:"Live Preview"})," feature uses the ",(0,l.jsx)(n.code,{children:"Plugin Panel"}),"."]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.img,{alt:"Plugin Panel Example",src:a(83804).A+"",width:"1919",height:"1099"})}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Bottom Panel"})," appears on the bottom of the screen. For Example :- ",(0,l.jsx)(n.em,{children:"Problems"})," feature uses the ",(0,l.jsx)(n.code,{children:"Bottom Panel"}),"."]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.img,{alt:"Bottom Panel Example",src:a(67824).A+"",width:"1919",height:"1105"})}),"\n",(0,l.jsx)(n.p,{children:"This document outlines the basic features of working with Panels."}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"#creating-a-plugin-panel",children:"How to create a Plugin Panel"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"#managing-plugin-panel-state",children:"How to manage Plugin Panel state"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"#creating-a-bottom-panel",children:"How to create a Bottom Panel"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"#managing-bottom-panel-state",children:"How to manage Bottom Panel state"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"#best-practices",children:"Best Practices for Panels"})}),"\n"]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h2,{id:"creating-a-plugin-panel",children:"Creating a Plugin Panel"}),"\n",(0,l.jsx)(n.p,{children:"To create a plugin panel, follow these steps:"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsxs)(n.strong,{children:["Import the ",(0,l.jsx)(n.code,{children:"WorkSpaceManager"})," modules"]})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-jsx",children:'const WorkspaceManager = brackets.getModule("view/WorkspaceManager");\n'})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Create panel content"}),"\nCreate a jQuery object containing your panel's HTML content:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-jsx",children:'const $panel = $("<div>")\n    .attr("id", "my-extension-panel")\n    .html("<h3>My Plugin Panel</h3><p>Hello from the panel!</p>");\n'})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Create toolbar icon"}),"\nCreate a toolbar icon to toggle the panel."]}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsx)(n.p,{children:"Creating a toolbar icon is mandatory, else the panel won't show up."}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Create the plugin panel"}),"\nUse ",(0,l.jsx)(n.code,{children:"WorkspaceManager.createPluginPanel()"})," to create your panel:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-jsx",children:'const pluginPanel = WorkspaceManager.createPluginPanel(\n    "myextension.panel", // Unique ID using package-style naming\n    $panel,             // jQuery object for panel content\n    200,               // minSize in pixels\n    $toolbarIcon,      // toolbar icon\n    400               // initialSize in pixels (optional)\n);\n'})}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:["For a detailed description, refer to ",(0,l.jsx)(n.a,{href:"https://docs.phcode.dev/api/API-Reference/view/WorkspaceManager#createPluginPanel",children:"this link"}),"."]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Full Code Example:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-jsx",children:'define(function (require, exports, module) {\n    "use strict";\n    \n    // Brackets modules\n    const AppInit = brackets.getModule("utils/AppInit"),\n        CommandManager = brackets.getModule("command/CommandManager"),\n        Menus = brackets.getModule("command/Menus"),\n        WorkspaceManager = brackets.getModule("view/WorkspaceManager");\n    \n    let pluginPanel; // Store panel reference\n    \n    // Function to run when the menu item is clicked\n    function handleTestExtension() {\n        if (!pluginPanel) {\n            // Create panel content\n            const $panel = $("<div>")\n                .attr("id", "my-extension-panel")\n                .html("<h3>My Plugin Panel</h3><p>Hello from the panel!</p>");\n            \n            // Create toolbar icon\n            const $toolbarIcon = $("#panel");\n            \n            // Create the plugin panel\n            pluginPanel = WorkspaceManager.createPluginPanel(\n                "myextension.panel",\n                $panel,\n                200,\n                $toolbarIcon,\n                400\n            );\n            pluginPanel.show();\n        }\n    }\n    \n    // Register command\n    const MY_COMMAND_ID = "test_menuitem";\n    CommandManager.register("Toggle Panel", MY_COMMAND_ID, handleTestExtension);\n    \n    // Add Menu item\n    const menu = Menus.getMenu(Menus.AppMenuBar.FILE_MENU);\n    menu.addMenuItem(MY_COMMAND_ID);\n    \n    // Initialize extension\n    AppInit.appReady(function () {\n        console.log("Panel extension initialized");\n    });\n});\n'})}),"\n",(0,l.jsxs)(n.p,{children:["Visual Reference\n",(0,l.jsx)(n.img,{alt:"Plugin Panel",src:a(68817).A+"",width:"1919",height:"1098"})]}),"\n",(0,l.jsx)(n.h2,{id:"managing-plugin-panel-state",children:"Managing Plugin Panel State"}),"\n",(0,l.jsx)(n.p,{children:"You can control the visibility and state of your plugin panel:"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Show/Hide Panel"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-jsx",children:"// Show panel\npluginPanel.show();\n\n// Hide panel\npluginPanel.hide();\n"})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Check Panel Visibility"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-jsx",children:"const isVisible = pluginPanel.isVisible();\n"})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Toggle Panel Visibility"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-jsx",children:"function togglePanel() {\n    if (pluginPanel.isVisible()) {\n        pluginPanel.hide();\n    } else {\n        pluginPanel.show();\n    }\n}\n"})}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"creating-a-bottom-panel",children:"Creating a Bottom Panel"}),"\n",(0,l.jsx)(n.p,{children:"Bottom panels are created similarly to plugin panels but use different methods:"}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:["For ",(0,l.jsx)(n.code,{children:"Bottom Panels"})," creating a toolbar icon is not required."]}),"\n"]}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Import required modules"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-jsx",children:'const WorkspaceManager = brackets.getModule("view/WorkspaceManager");\n'})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Create the bottom panel"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-jsx",children:'const bottomPanel = WorkspaceManager.createBottomPanel(\n    "myextension.panel",\n    $panel,\n    200,\n);\n'})}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:["For a detailed description, refer to ",(0,l.jsx)(n.a,{href:"https://docs.phcode.dev/api/API-Reference/view/WorkspaceManager#createBottomPanel",children:"this link"}),"."]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Full Code Example for Bottom Panel:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-jsx",children:'    define(function (require, exports, module) {\n        "use strict";\n        \n        // Brackets modules\n        const AppInit = brackets.getModule("utils/AppInit"),\n            CommandManager = brackets.getModule("command/CommandManager"),\n            Menus = brackets.getModule("command/Menus"),\n            WorkspaceManager = brackets.getModule("view/WorkspaceManager");\n        \n        let bottomPanel; // Store panel reference\n        \n        // Function to run when the menu item is clicked\n        function handleTestExtension() {\n            if (!bottomPanel) {\n                // Create panel content\n                const $panel = $("<div>")\n                    .attr("id", "my-extension-panel")\n                    .html("<h3>My Bottom Panel</h3><p>Hello from the panel!</p>");\n                \n                // Create the plugin panel\n                bottomPanel = WorkspaceManager.createBottomPanel(\n                    "myextension.panel",\n                    $panel,\n                    200,\n                );\n                bottomPanel.show();\n            }\n        }\n        \n        // Register command\n        const MY_COMMAND_ID = "test_menuitem";\n        CommandManager.register("Toggle Panel", MY_COMMAND_ID, handleTestExtension);\n        \n        // Add Menu item\n        const menu = Menus.getMenu(Menus.AppMenuBar.FILE_MENU);\n        menu.addMenuItem(MY_COMMAND_ID);\n        \n        // Initialize extension\n        AppInit.appReady(function () {\n            console.log("Panel extension initialized");\n        });\n    });\n'})}),"\n",(0,l.jsxs)(n.p,{children:["Visual Reference\n",(0,l.jsx)(n.img,{alt:"Bottom Panel",src:a(10045).A+"",width:"1919",height:"1125"})]}),"\n",(0,l.jsx)(n.h2,{id:"managing-bottom-panel-state",children:"Managing Bottom Panel State"}),"\n",(0,l.jsx)(n.p,{children:"Bottom panels support similar state management to plugin panels:"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Show/Hide Panel"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-jsx",children:"// Show panel\nbottomPanel.show();\n\n// Hide panel\nbottomPanel.hide();\n"})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Check Panel Visibility"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-jsx",children:"const isVisible = bottomPanel.isVisible();\n"})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Toggle Panel Visibility"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-jsx",children:"function togglePanel() {\n    if (bottomPanel.isVisible()) {\n        bottomPanel.hide();\n    } else {\n        bottomPanel.show();\n    }\n}\n"})}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:'Always use unique, package-style IDs (e.g., "yourextension.panel-name") to avoid conflicts with other extensions.'}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Save panel state (e.g., visibility, size) in preferences if needed, to restore state when the extension is reloaded."}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Example CSS for Bottom Panel:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-css",children:".bottom-panel {\n    background-color: #f8f9fa;\n    border-top: 1px solid #ddd;\n}\n\n.bottom-panel .toolbar {\n    padding: 4px 8px;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    background-color: #e9ecef;\n    border-bottom: 1px solid #ddd;\n}\n\n.bottom-panel .panel-content {\n    padding: 8px;\n    overflow-y: auto;\n}\n"})}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:["For more information about the WorkSpace Manager API, refer to the ",(0,l.jsx)(n.a,{href:"https://docs.phcode.dev/api/API-Reference/view/WorkspaceManager",children:"Phoenix Code API documentation"}),"."]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}},67824:(e,n,a)=>{a.d(n,{A:()=>t});const t=a.p+"assets/images/bottom-panel-example-d7b102fe2a72cdf87672dde01cf97705.png"},10045:(e,n,a)=>{a.d(n,{A:()=>t});const t=a.p+"assets/images/bottom-panel-84e2d0bb50feeac59a7f228347e97015.png"},83804:(e,n,a)=>{a.d(n,{A:()=>t});const t=a.p+"assets/images/plugin-panel-example-cdf9fbb9ccd3db750380862996b1d82c.png"},68817:(e,n,a)=>{a.d(n,{A:()=>t});const t=a.p+"assets/images/plugin-panel-ffdc0e6edeff5e1b9c10db5957ee911b.png"},28453:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>o});var t=a(96540);const l={},s=t.createContext(l);function i(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:i(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);