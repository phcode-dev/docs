"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3603],{60959:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"API-Reference/utils/LocalizationUtils","title":"LocalizationUtils","description":"Import :","source":"@site/api/API-Reference/utils/LocalizationUtils.md","sourceDirName":"API-Reference/utils","slug":"/API-Reference/utils/LocalizationUtils","permalink":"/api/API-Reference/utils/LocalizationUtils","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"KeyEvent","permalink":"/api/API-Reference/utils/KeyEvent"},"next":{"title":"NativeApp","permalink":"/api/API-Reference/utils/NativeApp"}}');var i=n(74848),d=n(28453);const s={},l=void 0,a={},o=[{value:"Import :",id:"import-",level:3},{value:"getLocalizedLabel(locale) \u21d2 <code>string</code>",id:"getlocalizedlabellocale--string",level:2},{value:"getFormattedDateTime([date], [lang], [dateTimeFormat]) \u21d2 <code>string</code>",id:"getformatteddatetimedate-lang-datetimeformat--string",level:2},{value:"dateTimeFromNow([date], [lang], [fromDate]) \u21d2 <code>string</code>",id:"datetimefromnowdate-lang-fromdate--string",level:2},{value:"dateTimeFromNowFriendly(date, [lang], [fromDate]) \u21d2 <code>string</code>",id:"datetimefromnowfriendlydate-lang-fromdate--string",level:2}];function c(e){const t={br:"br",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,d.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h3,{id:"import-",children:"Import :"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:'const LocalizationUtils = brackets.getModule("utils/LocalizationUtils")\n'})}),"\n",(0,i.jsx)("a",{name:"getLocalizedLabel"}),"\n",(0,i.jsxs)(t.h2,{id:"getlocalizedlabellocale--string",children:["getLocalizedLabel(locale) \u21d2 ",(0,i.jsx)("code",{children:"string"})]}),"\n",(0,i.jsx)(t.p,{children:"Converts a language code to its written name, if possible.\nIf not possible, the language code is simply returned."}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Kind"}),": global function",(0,i.jsx)(t.br,{}),"\n",(0,i.jsx)(t.strong,{children:"Returns"}),": ",(0,i.jsx)("code",{children:"string"})," - The language's name or the given language code"]}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Param"}),(0,i.jsx)(t.th,{children:"Type"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsx)(t.tbody,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"locale"}),(0,i.jsx)(t.td,{children:(0,i.jsx)("code",{children:"string"})}),(0,i.jsx)(t.td,{children:"The two-char language code"})]})})]}),"\n",(0,i.jsx)("a",{name:"getFormattedDateTime"}),"\n",(0,i.jsxs)(t.h2,{id:"getformatteddatetimedate-lang-datetimeformat--string",children:["getFormattedDateTime([date], [lang], [dateTimeFormat]) \u21d2 ",(0,i.jsx)("code",{children:"string"})]}),"\n",(0,i.jsx)(t.p,{children:"Formats a given date object into a locale-aware date and time string."}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Kind"}),": global function",(0,i.jsx)(t.br,{}),"\n",(0,i.jsx)(t.strong,{children:"Returns"}),": ",(0,i.jsx)("code",{children:"string"}),' - - The formatted date and time string (e.g., "Dec 24, 2024, 10:30 AM").']}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Param"}),(0,i.jsx)(t.th,{children:"Type"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"[date]"}),(0,i.jsx)(t.td,{children:(0,i.jsx)("code",{children:"Date"})}),(0,i.jsx)(t.td,{children:"The date object to format. If not provided, the current date and time will be used."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"[lang]"}),(0,i.jsx)(t.td,{children:(0,i.jsx)("code",{children:"string"})}),(0,i.jsx)(t.td,{children:"Optional language code to use for formatting (e.g., 'en', 'fr').                          If not provided, defaults to the application locale or 'en'."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"[dateTimeFormat]"}),(0,i.jsx)(t.td,{children:(0,i.jsx)("code",{children:"Object"})}),(0,i.jsxs)(t.td,{children:["Optional object specifying the date and time formatting options.                                    Defaults to ",(0,i.jsx)(t.code,{children:"{ dateStyle: 'medium', timeStyle: 'short' }"}),"."]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"[dateTimeFormat.dateStyle]"}),(0,i.jsx)(t.td,{children:(0,i.jsx)("code",{children:"string"})}),(0,i.jsx)(t.td,{children:"Specifies the date format style. One of: DATE_TIME_STYLE.*"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"[dateTimeFormat.timeStyle]"}),(0,i.jsx)(t.td,{children:(0,i.jsx)("code",{children:"string"})}),(0,i.jsx)(t.td,{children:"Specifies the time format style. One of: DATE_TIME_STYLE.*"})]})]})]}),"\n",(0,i.jsx)("a",{name:"dateTimeFromNow"}),"\n",(0,i.jsxs)(t.h2,{id:"datetimefromnowdate-lang-fromdate--string",children:["dateTimeFromNow([date], [lang], [fromDate]) \u21d2 ",(0,i.jsx)("code",{children:"string"})]}),"\n",(0,i.jsx)(t.p,{children:'Returns a relative time string (e.g., "2 days ago", "in 3 hours") based on the difference between the given date and now.'}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Kind"}),": global function",(0,i.jsx)(t.br,{}),"\n",(0,i.jsx)(t.strong,{children:"Returns"}),": ",(0,i.jsx)("code",{children:"string"}),' - - A human-readable relative time string (e.g., "2 days ago", "in 3 hours").']}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Param"}),(0,i.jsx)(t.th,{children:"Type"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"[date]"}),(0,i.jsx)(t.td,{children:(0,i.jsx)("code",{children:"Date"})}),(0,i.jsx)(t.td,{children:"The date to compare with the current date and time. If not given, defaults to now."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"[lang]"}),(0,i.jsx)(t.td,{children:(0,i.jsx)("code",{children:"string"})}),(0,i.jsx)(t.td,{children:"Optional language code to use for formatting (e.g., 'en', 'fr').                          If not provided, defaults to the application locale or 'en'."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"[fromDate]"}),(0,i.jsx)(t.td,{children:(0,i.jsx)("code",{children:"Date"})}),(0,i.jsx)(t.td,{children:"Optional date to use instead of now to compute the relative dateTime from."})]})]})]}),"\n",(0,i.jsx)("a",{name:"dateTimeFromNowFriendly"}),"\n",(0,i.jsxs)(t.h2,{id:"datetimefromnowfriendlydate-lang-fromdate--string",children:["dateTimeFromNowFriendly(date, [lang], [fromDate]) \u21d2 ",(0,i.jsx)("code",{children:"string"})]}),"\n",(0,i.jsx)(t.p,{children:"Returns an intelligent date string."}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:'For dates within the last 30 days or the future: relative time (e.g., "2 days ago", "in 3 hours").'}),"\n",(0,i.jsx)(t.li,{children:'For dates earlier this year: formatted date (e.g., "Jan 5").'}),"\n",(0,i.jsx)(t.li,{children:'For dates not in the current year: formatted date with year (e.g., "Jan 5, 2023").'}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Kind"}),": global function",(0,i.jsx)(t.br,{}),"\n",(0,i.jsx)(t.strong,{children:"Returns"}),": ",(0,i.jsx)("code",{children:"string"})," - - An intelligently formatted date string."]}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Param"}),(0,i.jsx)(t.th,{children:"Type"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"date"}),(0,i.jsx)(t.td,{children:(0,i.jsx)("code",{children:"Date"})}),(0,i.jsx)(t.td,{children:"The date to compare and format."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"[lang]"}),(0,i.jsx)(t.td,{children:(0,i.jsx)("code",{children:"string"})}),(0,i.jsx)(t.td,{children:"Optional language code to use for formatting (e.g., 'en', 'fr')."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"[fromDate]"}),(0,i.jsx)(t.td,{children:(0,i.jsx)("code",{children:"Date"})}),(0,i.jsx)(t.td,{children:"Optional date to use instead of now to compute the relative dateTime from."})]})]})]})]})}function h(e={}){const{wrapper:t}={...(0,d.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>l});var r=n(96540);const i={},d=r.createContext(i);function s(e){const t=r.useContext(d);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(d.Provider,{value:t},e.children)}}}]);