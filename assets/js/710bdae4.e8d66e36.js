"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4987],{69201:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>o,toc:()=>d});var r=i(74848),n=i(28453);const s={},l=void 0,o={id:"API-Reference/utils/ZipUtils",title:"ZipUtils",description:"Import :",source:"@site/api/API-Reference/utils/ZipUtils.md",sourceDirName:"API-Reference/utils",slug:"/API-Reference/utils/ZipUtils",permalink:"/api/API-Reference/utils/ZipUtils",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"ViewUtils",permalink:"/api/API-Reference/utils/ViewUtils"},next:{title:"MainViewFactory",permalink:"/api/API-Reference/view/MainViewFactory"}},c={},d=[{value:"Import :",id:"import-",level:3},{value:"unzipBinDataToLocation(zipData, projectDir, flattenFirstLevel, [progressControlCallback]) \u21d2 <code>Promise</code>",id:"unzipbindatatolocationzipdata-projectdir-flattenfirstlevel-progresscontrolcallback--promise",level:2},{value:"zipFolder(fullPath) \u21d2 <code>Promise.&lt;JSZip&gt;</code>",id:"zipfolderfullpath--promisejszip",level:2},{value:"unzipURLToLocation(url, projectDir, flattenFirstLevel) \u21d2 <code>Promise</code>",id:"unzipurltolocationurl-projectdir-flattenfirstlevel--promise",level:2}];function a(e){const t={a:"a",br:"br",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,n.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h3,{id:"import-",children:"Import :"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-js",children:'const ZipUtils = brackets.getModule("utils/ZipUtils")\n'})}),"\n",(0,r.jsx)("a",{name:"unzipBinDataToLocation"}),"\n",(0,r.jsxs)(t.h2,{id:"unzipbindatatolocationzipdata-projectdir-flattenfirstlevel-progresscontrolcallback--promise",children:["unzipBinDataToLocation(zipData, projectDir, flattenFirstLevel, [progressControlCallback]) \u21d2 ",(0,r.jsx)("code",{children:"Promise"})]}),"\n",(0,r.jsx)(t.p,{children:"Extracts a given binary zip data array to a specified location."}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Kind"}),": global function",(0,r.jsx)(t.br,{}),"\n",(0,r.jsx)(t.strong,{children:"Returns"}),": ",(0,r.jsx)("code",{children:"Promise"})," - - A promise that resolves when extraction is complete."]}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Param"}),(0,r.jsx)(t.th,{children:"Type"}),(0,r.jsx)(t.th,{children:"Default"}),(0,r.jsx)(t.th,{children:"Description"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"zipData"}),(0,r.jsx)(t.td,{children:(0,r.jsx)("code",{children:"UInt8Array"})}),(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"Binary zip data."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"projectDir"}),(0,r.jsx)(t.td,{children:(0,r.jsx)("code",{children:"string"})}),(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"Directory to extract to."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"flattenFirstLevel"}),(0,r.jsx)(t.td,{children:(0,r.jsx)("code",{children:"boolean"})}),(0,r.jsx)(t.td,{children:(0,r.jsx)("code",{children:"false"})}),(0,r.jsxs)(t.td,{children:["If set to true, then if zip contents are nested inside a directory,          the nested directory will be removed in the path structure in the destination. For example,          some zip may contain a ",(0,r.jsx)(t.code,{children:"contents"})," folder inside the zip which has all the files. If we blindly          extract the zip, all the contents will be placed inside a ",(0,r.jsx)(t.code,{children:"contents"})," folder in the root instead           of the root directory itself.           See a sample zip file here: ",(0,r.jsx)(t.a,{href:"https://api.github.com/repos/StartBootstrap/startbootstrap-grayscales/zipball",children:"https://api.github.com/repos/StartBootstrap/startbootstrap-grayscales/zipball"})]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"[progressControlCallback]"}),(0,r.jsx)(t.td,{children:(0,r.jsx)("code",{children:"function"})}),(0,r.jsx)(t.td,{}),(0,r.jsxs)(t.td,{children:["A function that can be used          to view the progress and stop further extraction. The function will be invoked with (doneCount, totalCount).          The function should return ",(0,r.jsx)(t.code,{children:"false"})," if further extraction needs to be stopped. If nothing or ",(0,r.jsx)(t.code,{children:"true"})," is returned,          it will continue extraction."]})]})]})]}),"\n",(0,r.jsx)("a",{name:"zipFolder"}),"\n",(0,r.jsxs)(t.h2,{id:"zipfolderfullpath--promisejszip",children:["zipFolder(fullPath) \u21d2 ",(0,r.jsx)("code",{children:"Promise.<JSZip>"})]}),"\n",(0,r.jsx)(t.p,{children:"Zips a given folder located at path to a jsZip object."}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Kind"}),": global function",(0,r.jsx)(t.br,{}),"\n",(0,r.jsx)(t.strong,{children:"Returns"}),": ",(0,r.jsx)("code",{children:"Promise.<JSZip>"})," - zip object"]}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Param"}),(0,r.jsx)(t.th,{children:"Type"}),(0,r.jsx)(t.th,{children:"Description"})]})}),(0,r.jsx)(t.tbody,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"fullPath"}),(0,r.jsx)(t.td,{children:(0,r.jsx)("code",{children:"string"})}),(0,r.jsx)(t.td,{children:"to zip"})]})})]}),"\n",(0,r.jsx)("a",{name:"unzipURLToLocation"}),"\n",(0,r.jsxs)(t.h2,{id:"unzipurltolocationurl-projectdir-flattenfirstlevel--promise",children:["unzipURLToLocation(url, projectDir, flattenFirstLevel) \u21d2 ",(0,r.jsx)("code",{children:"Promise"})]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Kind"}),": global function"]}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Param"}),(0,r.jsx)(t.th,{children:"Default"}),(0,r.jsx)(t.th,{children:"Description"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"url"}),(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"the zip fle URL"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"projectDir"}),(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"To extract to"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"flattenFirstLevel"}),(0,r.jsx)(t.td,{children:(0,r.jsx)("code",{children:"false"})}),(0,r.jsxs)(t.td,{children:["if set to true, then if zip contents are nested inside a directory, the nexted dir will be removed in the path structure in destination. For Eg. some Zip may contain a ",(0,r.jsx)(t.code,{children:"contents"})," folder inside the zip which has all the contents. If we blindly extract the zio, all the contents will be placed inside a ",(0,r.jsx)(t.code,{children:"contents"})," folder in root and not the root dir itself. See a sample zip file here: ",(0,r.jsx)(t.a,{href:"https://api.github.com/repos/StartBootstrap/startbootstrap-grayscales/zipball",children:"https://api.github.com/repos/StartBootstrap/startbootstrap-grayscales/zipball"})]})]})]})]})]})}function h(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},28453:(e,t,i)=>{i.d(t,{R:()=>l,x:()=>o});var r=i(96540);const n={},s=r.createContext(n);function l(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:l(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);