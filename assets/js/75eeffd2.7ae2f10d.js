"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5303],{38154:(e,i,r)=>{r.r(i),r.d(i,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>t,metadata:()=>c,toc:()=>a});var n=r(74848),o=r(28453);const t={},s=void 0,c={id:"API-Reference/features/QuickViewManager",title:"QuickViewManager",description:"Import :",source:"@site/api/API-Reference/features/QuickViewManager.md",sourceDirName:"API-Reference/features",slug:"/API-Reference/features/QuickViewManager",permalink:"/api/API-Reference/features/QuickViewManager",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"NewFileContentManager",permalink:"/api/API-Reference/features/NewFileContentManager"},next:{title:"SelectionViewManager",permalink:"/api/API-Reference/features/SelectionViewManager"}},l={},a=[{value:"Import :",id:"import-",level:3},{value:"features/QuickViewManager",id:"featuresquickviewmanager",level:2},{value:"See Related: SelectionViewManager",id:"see-related-selectionviewmanager",level:3},{value:"Usage",id:"usage",level:2},{value:"How it works",id:"how-it-works",level:3},{value:"API",id:"api",level:2},{value:"registerQuickViewProvider",id:"registerquickviewprovider",level:3},{value:"removeQuickViewProvider",id:"removequickviewprovider",level:3},{value:"getQuickView",id:"getquickview",level:3},{value:"parameters",id:"parameters",level:4},{value:"return types",id:"return-types",level:4},{value:"Modifying the QuickView content after resolving <code>getQuickView</code> promise",id:"modifying-the-quickview-content-after-resolving-getquickview-promise",level:4},{value:"Considerations",id:"considerations",level:4},{value:"filterQuickView",id:"filterquickview",level:3},{value:"parameter",id:"parameter",level:4},{value:"return",id:"return",level:4},{value:"features/QuickViewManager.isQuickViewShown() \u21d2 <code>boolean</code>",id:"featuresquickviewmanagerisquickviewshown--boolean",level:3},{value:"features/QuickViewManager.lockQuickView() : <code>function</code>",id:"featuresquickviewmanagerlockquickview--function",level:3},{value:"features/QuickViewManager.unlockQuickView() : <code>function</code>",id:"featuresquickviewmanagerunlockquickview--function",level:3}];function d(e){const i={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(i.h3,{id:"import-",children:"Import :"}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-js",children:'const QuickViewManager = brackets.getModule("features/QuickViewManager")\n'})}),"\n",(0,n.jsx)("a",{name:"module_features/QuickViewManager"}),"\n",(0,n.jsx)(i.h2,{id:"featuresquickviewmanager",children:"features/QuickViewManager"}),"\n",(0,n.jsxs)(i.p,{children:["QuickViewManager provides support to add interactive preview popups on hover over the main editors.\rExtensions can register to provide previews with ",(0,n.jsx)(i.code,{children:"QuickViewManager.registerQuickViewProvider"})," API."]}),"\n",(0,n.jsx)("img",{src:"https://docs-images.phcode.dev/phcode-sdk/quick-view-image.png",alt:"Phoenix code quick view"}),"\n",(0,n.jsx)("img",{src:"https://docs-images.phcode.dev/phcode-sdk/quick-view-youtube.png",alt:"Phoenix code quick view Youtube"}),"\n",(0,n.jsx)(i.h3,{id:"see-related-selectionviewmanager",children:"See Related: SelectionViewManager"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.a,{href:"https://github.com/phcode-dev/phoenix/wiki/SelectionViewManager-API",children:"features/SelectionViewManager"})," is similar to\rQuickViewManager API."]}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:"SelectionViews popup only once user selects a text by mouse or hover over a region with text selection."}),"\n",(0,n.jsx)(i.li,{children:"Quickviews popup on mouse hover."}),"\n"]}),"\n",(0,n.jsx)("img",{src:"https://user-images.githubusercontent.com/5336369/186434397-3db55789-6077-4d02-b4e2-78ef3f663399.png",alt:"quick view pops on mouse hover"}),"\n",(0,n.jsx)(i.h2,{id:"usage",children:"Usage"}),"\n",(0,n.jsx)(i.p,{children:'Lets build a "hello world" extension that displays "hello world" on hover over a text in the editor.\rIn your extension file, add the following code:'}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.strong,{children:"Example"})}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-js",children:'const QuickViewManager = brackets.getModule("features/QuickViewManager");\r// replace `all` with language ID(Eg. javascript) if you want to restrict the preview to js files only.\rQuickViewManager.registerQuickViewProvider(exports, ["all"]);\r\r// provide a helpful name for the QuickView. This will be useful if you implement `filterQuickView` function or\r// have to debug the quick view.\rexports.QUICK_VIEW_NAME = "extension.someName";\r// now implement the getQuickView function that will be invoked when ever user hovers over a text in the editor.\rexports.getQuickView = function(editor, pos, token, line) {\r        return new Promise((resolve, reject)=>{\r            resolve({\r                start: {line: pos.line, ch:token.start},\r                end: {line: pos.line, ch:token.end},\r                content: "<div>hello world</div>"\r            });\r        });\r    };\r// optional filter quick view function to handle multiple quick views\rexports.filterQuickView = function(popovers){\r    // popovers will be an array of all popovers rendered by providers\r    return popovers; // dont filter show everything in this case\r}\n'})}),"\n",(0,n.jsx)(i.h3,{id:"how-it-works",children:"How it works"}),"\n",(0,n.jsxs)(i.p,{children:["When QuickViewManager determines that the user intents to see QuickView on hover, ",(0,n.jsx)(i.code,{children:"getQuickView"})," function on all\rregistered QuickView providers are invoked to get the quick view popup. ",(0,n.jsx)(i.code,{children:"getQuickView"})," should return a promise\rthat resolves to the popup contents if the provider has a quick view. Else just reject the promise. If multiple\rproviders returns QuickView, all of them are displayed stacked one by one. You can alter this behavior by\rproviding a ",(0,n.jsx)(i.code,{children:"filterQuickView"})," function in the provider where you can modify what previews will be shown.\rSee detailed API docs for implementation details below:"]}),"\n",(0,n.jsx)(i.h2,{id:"api",children:"API"}),"\n",(0,n.jsx)(i.h3,{id:"registerquickviewprovider",children:"registerQuickViewProvider"}),"\n",(0,n.jsxs)(i.p,{children:["Register a QuickView provider with this api.\n",(0,n.jsx)(i.strong,{children:"Example"})]}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-js",children:"// syntax\rQuickViewManager.registerQuickViewProvider(provider, supportedLanguages);\n"})}),"\n",(0,n.jsx)(i.p,{children:"The API requires two parameters:"}),"\n",(0,n.jsxs)(i.ol,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"provider"}),": must implement a  ",(0,n.jsx)(i.code,{children:"getQuickView"})," function which will be invoked to get the preview. See API doc below."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"supportedLanguages"}),": An array of languages that the QuickView supports. If ",(0,n.jsx)(i.code,{children:'["all"]'})," is supplied, then the\rQuickView will be invoked for all languages. Restrict to specific languages: Eg: ",(0,n.jsx)(i.code,{children:'["javascript", "html", "php"]'}),"\n",(0,n.jsx)(i.strong,{children:"Example"})]}),"\n"]}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-js",children:'// to register a provider that will be invoked for all languages. where provider is any object that implements\r// a getQuickView function\rQuickViewManager.registerQuickViewProvider(provider, ["all"]);\r\r// to register a provider that will be invoked for specific languages\rQuickViewManager.registerQuickViewProvider(provider, ["javascript", "html", "php"]);\n'})}),"\n",(0,n.jsx)(i.h3,{id:"removequickviewprovider",children:"removeQuickViewProvider"}),"\n",(0,n.jsxs)(i.p,{children:["Removes a registered QuickView provider. The API takes the same arguments as ",(0,n.jsx)(i.code,{children:"registerQuickViewProvider"}),".\n",(0,n.jsx)(i.strong,{children:"Example"})]}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-js",children:'// syntax\rQuickViewManager.removeQuickViewProvider(provider, supportedLanguages);\r// Example\rQuickViewManager.removeQuickViewProvider(provider, ["javascript", "html"]);\n'})}),"\n",(0,n.jsx)(i.h3,{id:"getquickview",children:"getQuickView"}),"\n",(0,n.jsxs)(i.p,{children:["Each provider must implement the ",(0,n.jsx)(i.code,{children:"getQuickView"})," function that returns a promise. The promise either resolves with\rthe quick view details object(described below) or rejects if there is no preview for the position.\n",(0,n.jsx)(i.strong,{children:"Example"})]}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-js",children:'// function signature\rprovider.getQuickView = function(editor, pos, token, line) {\r        return new Promise((resolve, reject)=>{\r            resolve({\r                start: {line: pos.line, ch:token.start},\r                end: {line: pos.line, ch:token.end},\r                content: "<div>hello world</div>",\r                editsDoc: false // this is optional if the quick view edits the current doc\r            });\r        });\r    };\n'})}),"\n",(0,n.jsx)(i.h4,{id:"parameters",children:"parameters"}),"\n",(0,n.jsx)(i.p,{children:"The function will be called with the following arguments:"}),"\n",(0,n.jsxs)(i.ol,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"editor"})," - The editor over which the user hovers the mouse cursor."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"pos"})," - the cursor position over which the user hovers."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"token"})," - hovered token details"]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"line"})," - the full line text as string."]}),"\n"]}),"\n",(0,n.jsx)(i.h4,{id:"return-types",children:"return types"}),"\n",(0,n.jsx)(i.p,{children:"The promise returned should resolve to an object with the following contents:"}),"\n",(0,n.jsxs)(i.ol,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"start"})," : Indicates the start cursor position from which the quick view is valid."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"end"})," : Indicates the end cursor position to which the quick view is valid. These are generally used to highlight\rthe hovered section of the text in the editor."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"content"}),": Either ",(0,n.jsx)(i.code,{children:"HTML"})," as text, a ",(0,n.jsx)(i.code,{children:"DOM Node"})," or a ",(0,n.jsx)(i.code,{children:"Jquery Element"}),"."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"editsDoc"}),": Optional, set to true if the quick view can edit the active document."]}),"\n"]}),"\n",(0,n.jsxs)(i.h4,{id:"modifying-the-quickview-content-after-resolving-getquickview-promise",children:["Modifying the QuickView content after resolving ",(0,n.jsx)(i.code,{children:"getQuickView"})," promise"]}),"\n",(0,n.jsxs)(i.p,{children:["Some advanced/interactive extensions may need to do dom operations on the quick view content.\rIn such cases, it is advised to return a domNode/Jquery element as content in ",(0,n.jsx)(i.code,{children:"getQuickView"}),". Event Handlers\ror further dom manipulations can be done on the returned content element.\rThe Quick view may be dismissed at any time, so be sure to check if the DOM Node is visible in the editor before\rperforming any operations."]}),"\n",(0,n.jsx)(i.h4,{id:"considerations",children:"Considerations"}),"\n",(0,n.jsxs)(i.ol,{children:["\n",(0,n.jsx)(i.li,{children:"QuickView won't be displayed till all provider promises are settled. To improve performance, if your QuickView\rhandler takes time to resolve the QuickView, resolve a dummy quick once you are sure that a QuickView needs\rto be shown to the user. The div contents can be later updated as and when more details are available."}),"\n",(0,n.jsx)(i.li,{children:"Note that the QuickView could be hidden/removed any time by the QuickViewManager."}),"\n",(0,n.jsxs)(i.li,{children:["If multiple providers returns a valid popup, all of them are displayed except if the ",(0,n.jsx)(i.code,{children:"filterQuickView"})," modifies\rthe quick view render list. Note that ",(0,n.jsx)(i.code,{children:"filterQuickView"})," is called only for those providers that\rprovided a quick view."]}),"\n"]}),"\n",(0,n.jsx)(i.h3,{id:"filterquickview",children:"filterQuickView"}),"\n",(0,n.jsxs)(i.p,{children:["Each provider can optionally implement the ",(0,n.jsx)(i.code,{children:"filterQuickView"})," function to control what among the available\rquick views should be rendered if multiple providers responded with a QuickView. The function will be called\ronce all ",(0,n.jsx)(i.code,{children:"getQuickView"})," providers provided a valid preview object.\n",(0,n.jsx)(i.strong,{children:"Example"})]}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-js",children:'// function signature\rprovider.filterQuickView = function(popovers) {\r         for(let popover of popovers){\r            // here if we see that a quick view with name `exclusiveQuickView` is present, then we only show that\r            // QuickView. popover.providerInfo object holds details of what provider provided the quick view.\r            if(popover.providerInfo.provider.QUICK_VIEW_NAME === "exclusiveQuickView"){\r                return [popover]\r            }\r        }\r        // if nothing is returned, then the `popovers` param will be used to show popover\r    };\n'})}),"\n",(0,n.jsx)(i.h4,{id:"parameter",children:"parameter"}),"\n",(0,n.jsxs)(i.p,{children:["The function will be called with the ",(0,n.jsx)(i.code,{children:"popovers"})," parameter which is an array of popover objects that was returned\rby ",(0,n.jsx)(i.code,{children:"getQuickView"})," function of all succeeded providers. Details of each provider that created a popover\rwill be present in ",(0,n.jsx)(i.code,{children:"popovers[i].providerInfo"})," object."]}),"\n",(0,n.jsx)(i.h4,{id:"return",children:"return"}),"\n",(0,n.jsx)(i.p,{children:"An array of popovers that needs to be rendered, or nothing(to render the original popover parameter as is)."}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.a,{href:"#module_features/QuickViewManager",children:"features/QuickViewManager"}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.a,{href:"#module_features/QuickViewManager..isQuickViewShown",children:".isQuickViewShown()"})," \u21d2 ",(0,n.jsx)("code",{children:"boolean"})]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.a,{href:"#module_features/QuickViewManager..lockQuickView",children:".lockQuickView()"})," : ",(0,n.jsx)("code",{children:"function"})]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.a,{href:"#module_features/QuickViewManager..unlockQuickView",children:".unlockQuickView()"})," : ",(0,n.jsx)("code",{children:"function"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)("a",{name:"module_features/QuickViewManager..isQuickViewShown"}),"\n",(0,n.jsxs)(i.h3,{id:"featuresquickviewmanagerisquickviewshown--boolean",children:["features/QuickViewManager.isQuickViewShown() \u21d2 ",(0,n.jsx)("code",{children:"boolean"})]}),"\n",(0,n.jsx)(i.p,{children:"If quickview is displayed and visible on screen"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.strong,{children:"Kind"}),": inner method of ",(0,n.jsx)(i.a,{href:"#module_features/QuickViewManager",children:(0,n.jsx)("code",{children:"features/QuickViewManager"})})]}),"\n",(0,n.jsx)("a",{name:"module_features/QuickViewManager..lockQuickView"}),"\n",(0,n.jsxs)(i.h3,{id:"featuresquickviewmanagerlockquickview--function",children:["features/QuickViewManager.lockQuickView() : ",(0,n.jsx)("code",{children:"function"})]}),"\n",(0,n.jsxs)(i.p,{children:["locks the current QuickView if shown to be permanently displayed on screen till the ",(0,n.jsx)(i.code,{children:"unlockQuickView"})," function\ris called or document changes."]}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.strong,{children:"Kind"}),": inner method of ",(0,n.jsx)(i.a,{href:"#module_features/QuickViewManager",children:(0,n.jsx)("code",{children:"features/QuickViewManager"})})]}),"\n",(0,n.jsx)("a",{name:"module_features/QuickViewManager..unlockQuickView"}),"\n",(0,n.jsxs)(i.h3,{id:"featuresquickviewmanagerunlockquickview--function",children:["features/QuickViewManager.unlockQuickView() : ",(0,n.jsx)("code",{children:"function"})]}),"\n",(0,n.jsxs)(i.p,{children:["unlocks the current QuickView locked by ",(0,n.jsx)(i.code,{children:"lockQuickView"})," fucntion."]}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.strong,{children:"Kind"}),": inner method of ",(0,n.jsx)(i.a,{href:"#module_features/QuickViewManager",children:(0,n.jsx)("code",{children:"features/QuickViewManager"})})]})]})}function u(e={}){const{wrapper:i}={...(0,o.R)(),...e.components};return i?(0,n.jsx)(i,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},28453:(e,i,r)=>{r.d(i,{R:()=>s,x:()=>c});var n=r(96540);const o={},t=n.createContext(o);function s(e){const i=n.useContext(t);return n.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function c(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),n.createElement(t.Provider,{value:i},e.children)}}}]);