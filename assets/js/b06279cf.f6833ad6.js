"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[842],{89533:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>o,frontMatter:()=>a,metadata:()=>d,toc:()=>c});var r=n(74848),s=n(28453);const a={},i=void 0,d={id:"API-Reference/utils/PerfUtils",title:"PerfUtils",description:"Import :",source:"@site/api/API-Reference/utils/PerfUtils.md",sourceDirName:"API-Reference/utils",slug:"/API-Reference/utils/PerfUtils",permalink:"/api/API-Reference/utils/PerfUtils",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"NodeConnection",permalink:"/api/API-Reference/utils/NodeConnection"},next:{title:"Resizer",permalink:"/api/API-Reference/utils/Resizer"}},l={},c=[{value:"Import :",id:"import-",level:3},{value:"_",id:"_",level:2},{value:"enabled : <code>boolean</code>",id:"enabled--boolean",level:2},{value:"perfData",id:"perfdata",level:2},{value:"activeTests",id:"activetests",level:2},{value:"updatableTests",id:"updatabletests",level:2},{value:"createPerfMeasurement(id, name)",id:"createperfmeasurementid-name",level:2},{value:"markStart(name) \u21d2 <code>Object</code> | <code>Array.&lt;Object&gt;</code>",id:"markstartname--object--arrayobject",level:2},{value:"addMeasurement(id)",id:"addmeasurementid",level:2},{value:"updateMeasurement(id)",id:"updatemeasurementid",level:2},{value:"finalizeMeasurement(id)",id:"finalizemeasurementid",level:2},{value:"isActive(id) \u21d2 <code>boolean</code>",id:"isactiveid--boolean",level:2},{value:"getValueAsString(entry, aggregateStats) \u21d2 <code>String</code>",id:"getvalueasstringentry-aggregatestats--string",level:2},{value:"getDelimitedPerfData() \u21d2 <code>string</code>",id:"getdelimitedperfdata--string",level:2},{value:"getData(id)",id:"getdataid",level:2},{value:"getHealthReport() \u21d2 <code>Object</code>",id:"gethealthreport--object",level:2},{value:"clear()",id:"clear",level:2}];function h(e){const t={br:"br",code:"code",em:"em",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h3,{id:"import-",children:"Import :"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-js",children:'const PerfUtils = brackets.getModule("utils/PerfUtils")\n'})}),"\n",(0,r.jsx)("a",{name:"_"}),"\n",(0,r.jsx)(t.h2,{id:"_",children:"_"}),"\n",(0,r.jsx)(t.p,{children:"This is a collection of utility functions for gathering performance data."}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Kind"}),": global variable"]}),"\n",(0,r.jsx)("a",{name:"enabled"}),"\n",(0,r.jsxs)(t.h2,{id:"enabled--boolean",children:["enabled : ",(0,r.jsx)("code",{children:"boolean"})]}),"\n",(0,r.jsx)(t.p,{children:"Flag to enable/disable performance data gathering. Default is true (enabled)"}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Kind"}),": global variable"]}),"\n",(0,r.jsx)("a",{name:"perfData"}),"\n",(0,r.jsx)(t.h2,{id:"perfdata",children:"perfData"}),"\n",(0,r.jsx)(t.p,{children:"Performance data is stored in this hash object. The key is the name of the\rtest (passed to markStart/addMeasurement), and the value is the time, in\rmilliseconds, that it took to run the test. If multiple runs of the same test\rare made, the value is an Array with each run stored as an entry in the Array."}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Kind"}),": global variable"]}),"\n",(0,r.jsx)("a",{name:"activeTests"}),"\n",(0,r.jsx)(t.h2,{id:"activetests",children:"activeTests"}),"\n",(0,r.jsx)(t.p,{children:"Active tests. This is a hash of all tests that have had markStart() called,\rbut have not yet had addMeasurement() called."}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Kind"}),": global variable"]}),"\n",(0,r.jsx)("a",{name:"updatableTests"}),"\n",(0,r.jsx)(t.h2,{id:"updatabletests",children:"updatableTests"}),"\n",(0,r.jsx)(t.p,{children:"Updatable tests. This is a hash of all tests that have had markStart() called,\rand have had updateMeasurement() called. Caller must explicitly remove tests\rfrom this list using finalizeMeasurement()"}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Kind"}),": global variable"]}),"\n",(0,r.jsx)("a",{name:"createPerfMeasurement"}),"\n",(0,r.jsx)(t.h2,{id:"createperfmeasurementid-name",children:"createPerfMeasurement(id, name)"}),"\n",(0,r.jsx)(t.p,{children:"Create a new PerfMeasurement key. Adds itself to the module export.\rCan be accessed on the module, e.g. PerfUtils.MY_PERF_KEY."}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Kind"}),": global function"]}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Param"}),(0,r.jsx)(t.th,{children:"Type"}),(0,r.jsx)(t.th,{children:"Description"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"id"}),(0,r.jsx)(t.td,{children:(0,r.jsx)("code",{children:"string"})}),(0,r.jsx)(t.td,{children:"Unique ID for this measurement name"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"name"}),(0,r.jsx)(t.td,{children:(0,r.jsx)("code",{children:"name"})}),(0,r.jsx)(t.td,{children:"A short name for this measurement"})]})]})]}),"\n",(0,r.jsx)("a",{name:"markStart"}),"\n",(0,r.jsxs)(t.h2,{id:"markstartname--object--arrayobject",children:["markStart(name) \u21d2 ",(0,r.jsx)("code",{children:"Object"})," | ",(0,r.jsx)("code",{children:"Array.<Object>"})]}),"\n",(0,r.jsx)(t.p,{children:'Start a new named timer. The name should be as descriptive as possible, since\rthis name will appear as an entry in the performance report.\rFor example: "Open file: /Users/brackets/src/ProjectManager.js"'}),"\n",(0,r.jsx)(t.p,{children:"Multiple timers can be opened simultaneously."}),"\n",(0,r.jsx)(t.p,{children:"Returns an opaque set of timer ids which can be stored and used for calling\raddMeasurement(). Since name is often creating via concatenating strings this\rreturn value allows clients to construct the name once."}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Kind"}),": global function",(0,r.jsx)(t.br,{}),"\n",(0,r.jsx)(t.strong,{children:"Returns"}),": ",(0,r.jsx)("code",{children:"Object"})," | ",(0,r.jsx)("code",{children:"Array.<Object>"})," - Opaque timer id or array of timer ids."]}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Param"}),(0,r.jsx)(t.th,{children:"Type"}),(0,r.jsx)(t.th,{children:"Description"})]})}),(0,r.jsx)(t.tbody,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"name"}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)("code",{children:"string"})," | ",(0,r.jsx)("code",{children:"Array.<string>"})]}),(0,r.jsx)(t.td,{children:"Single name or an Array of names."})]})})]}),"\n",(0,r.jsx)("a",{name:"addMeasurement"}),"\n",(0,r.jsx)(t.h2,{id:"addmeasurementid",children:"addMeasurement(id)"}),"\n",(0,r.jsx)(t.p,{children:"Stop a timer and add its measurements to the performance data."}),"\n",(0,r.jsx)(t.p,{children:"Multiple measurements can be stored for any given name. If there are\rmultiple values for a name, they are stored in an Array."}),"\n",(0,r.jsx)(t.p,{children:"If markStart() was not called for the specified timer, the\rmeasured time is relative to app startup."}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Kind"}),": global function"]}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Param"}),(0,r.jsx)(t.th,{children:"Type"}),(0,r.jsx)(t.th,{children:"Description"})]})}),(0,r.jsx)(t.tbody,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"id"}),(0,r.jsx)(t.td,{children:(0,r.jsx)("code",{children:"Object"})}),(0,r.jsx)(t.td,{children:"Timer id."})]})})]}),"\n",(0,r.jsx)("a",{name:"updateMeasurement"}),"\n",(0,r.jsx)(t.h2,{id:"updatemeasurementid",children:"updateMeasurement(id)"}),"\n",(0,r.jsxs)(t.p,{children:["This function is similar to addMeasurement(), but it allows timing the\r",(0,r.jsx)(t.em,{children:"last"})," event, when you don't know which event will be the last one."]}),"\n",(0,r.jsx)(t.p,{children:"Tests that are in the activeTests list, have not yet been added, so add\rmeasurements to the performance data, and move test to updatableTests list.\rA test is moved to the updatable list so that it no longer passes isActive()."}),"\n",(0,r.jsx)(t.p,{children:"Tests that are already in the updatableTests list are updated."}),"\n",(0,r.jsx)(t.p,{children:"Caller must explicitly remove test from the updatableTests list using\rfinalizeMeasurement()."}),"\n",(0,r.jsx)(t.p,{children:"If markStart() was not called for the specified timer, there is no way to\rdetermine if this is the first or subsequent call, so the measurement is\rnot updatable, and it is handled in addMeasurement()."}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Kind"}),": global function"]}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Param"}),(0,r.jsx)(t.th,{children:"Type"}),(0,r.jsx)(t.th,{children:"Description"})]})}),(0,r.jsx)(t.tbody,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"id"}),(0,r.jsx)(t.td,{children:(0,r.jsx)("code",{children:"Object"})}),(0,r.jsx)(t.td,{children:"Timer id."})]})})]}),"\n",(0,r.jsx)("a",{name:"finalizeMeasurement"}),"\n",(0,r.jsx)(t.h2,{id:"finalizemeasurementid",children:"finalizeMeasurement(id)"}),"\n",(0,r.jsx)(t.p,{children:"Remove timer from lists so next action starts a new measurement"}),"\n",(0,r.jsx)(t.p,{children:"updateMeasurement may not have been called, so timer may be\rin either or neither list, but should never be in both."}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Kind"}),": global function"]}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Param"}),(0,r.jsx)(t.th,{children:"Type"}),(0,r.jsx)(t.th,{children:"Description"})]})}),(0,r.jsx)(t.tbody,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"id"}),(0,r.jsx)(t.td,{children:(0,r.jsx)("code",{children:"Object"})}),(0,r.jsx)(t.td,{children:"Timer id."})]})})]}),"\n",(0,r.jsx)("a",{name:"isActive"}),"\n",(0,r.jsxs)(t.h2,{id:"isactiveid--boolean",children:["isActive(id) \u21d2 ",(0,r.jsx)("code",{children:"boolean"})]}),"\n",(0,r.jsx)(t.p,{children:'Returns whether a timer is active or not, where "active" means that\rtimer has been started with addMark(), but has not been added to perfdata\rwith addMeasurement().'}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Kind"}),": global function",(0,r.jsx)(t.br,{}),"\n",(0,r.jsx)(t.strong,{children:"Returns"}),": ",(0,r.jsx)("code",{children:"boolean"})," - Whether a timer is active or not."]}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Param"}),(0,r.jsx)(t.th,{children:"Type"}),(0,r.jsx)(t.th,{children:"Description"})]})}),(0,r.jsx)(t.tbody,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"id"}),(0,r.jsx)(t.td,{children:(0,r.jsx)("code",{children:"Object"})}),(0,r.jsx)(t.td,{children:"Timer id."})]})})]}),"\n",(0,r.jsx)("a",{name:"getValueAsString"}),"\n",(0,r.jsxs)(t.h2,{id:"getvalueasstringentry-aggregatestats--string",children:["getValueAsString(entry, aggregateStats) \u21d2 ",(0,r.jsx)("code",{children:"String"})]}),"\n",(0,r.jsx)(t.p,{children:'return single value, or comma separated values for an array or return aggregated values with\r"min value, average, max value, standard deviation"'}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Kind"}),": global function",(0,r.jsx)(t.br,{}),"\n",(0,r.jsx)(t.strong,{children:"Returns"}),": ",(0,r.jsx)("code",{children:"String"}),' - a single value, or comma separated values in an array or\r"min(avg)max[standard deviation]" if aggregateStats is set']}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Param"}),(0,r.jsx)(t.th,{children:"Type"}),(0,r.jsx)(t.th,{children:"Description"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"entry"}),(0,r.jsx)(t.td,{children:(0,r.jsx)("code",{children:"Array"})}),(0,r.jsx)(t.td,{children:"An array or a single value"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"aggregateStats"}),(0,r.jsx)(t.td,{children:(0,r.jsx)("code",{children:"Boolean"})}),(0,r.jsx)(t.td,{children:'If set, the returned value will be aggregated in the form -                                   "min(avg)max[standard deviation]"'})]})]})]}),"\n",(0,r.jsx)("a",{name:"getDelimitedPerfData"}),"\n",(0,r.jsxs)(t.h2,{id:"getdelimitedperfdata--string",children:["getDelimitedPerfData() \u21d2 ",(0,r.jsx)("code",{children:"string"})]}),"\n",(0,r.jsx)(t.p,{children:"Returns the performance data as a tab delimited string"}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Kind"}),": global function"]}),"\n",(0,r.jsx)("a",{name:"getData"}),"\n",(0,r.jsx)(t.h2,{id:"getdataid",children:"getData(id)"}),"\n",(0,r.jsx)(t.p,{children:"Returns the measured value for the given measurement name."}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Kind"}),": global function"]}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Param"}),(0,r.jsx)(t.th,{children:"Type"}),(0,r.jsx)(t.th,{children:"Description"})]})}),(0,r.jsx)(t.tbody,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"id"}),(0,r.jsx)(t.td,{children:(0,r.jsx)("code",{children:"Object"})}),(0,r.jsx)(t.td,{children:"The measurement to retreive."})]})})]}),"\n",(0,r.jsx)("a",{name:"getHealthReport"}),"\n",(0,r.jsxs)(t.h2,{id:"gethealthreport--object",children:["getHealthReport() \u21d2 ",(0,r.jsx)("code",{children:"Object"})]}),"\n",(0,r.jsx)(t.p,{children:"Returns the Performance metrics to be logged for health report"}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Kind"}),": global function",(0,r.jsx)(t.br,{}),"\n",(0,r.jsx)(t.strong,{children:"Returns"}),": ",(0,r.jsx)("code",{children:"Object"})," - An object with the health data logs to be sent"]}),"\n",(0,r.jsx)("a",{name:"clear"}),"\n",(0,r.jsx)(t.h2,{id:"clear",children:"clear()"}),"\n",(0,r.jsx)(t.p,{children:"Clear all logs including metric data and active tests."}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Kind"}),": global function"]})]})}function o(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>d});var r=n(96540);const s={},a=r.createContext(s);function i(e){const t=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(a.Provider,{value:t},e.children)}}}]);