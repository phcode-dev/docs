"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6896],{84650:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>s,default:()=>x,frontMatter:()=>d,metadata:()=>l,toc:()=>c});var t=i(74848),r=i(28453);const d={},s=void 0,l={id:"API-Reference/editor/EditorCommandHandlers",title:"EditorCommandHandlers",description:"Import :",source:"@site/api/API-Reference/editor/EditorCommandHandlers.md",sourceDirName:"API-Reference/editor",slug:"/API-Reference/editor/EditorCommandHandlers",permalink:"/api/API-Reference/editor/EditorCommandHandlers",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"CodeHintManager",permalink:"/api/API-Reference/editor/CodeHintManager"},next:{title:"EditorManager",permalink:"/api/API-Reference/editor/EditorManager"}},o={},c=[{value:"Import :",id:"import-",level:3},{value:"DIRECTION_UP",id:"direction_up",level:2},{value:"_getBlockCommentPrefixSuffixEdit(editor, prefix, suffix, linePrefixes, sel, selectionsToTrack, command) \u21d2 <code>Object</code> | <code>Object</code> | <code>null</code>",id:"_getblockcommentprefixsuffixediteditor-prefix-suffix-lineprefixes-sel-selectionstotrack-command--object--object--null",level:2},{value:"_getLineCommentPrefixSuffixEdit(editor, prefix, suffix, lineSel, command) \u21d2 <code>Object</code>",id:"_getlinecommentprefixsuffixediteditor-prefix-suffix-linesel-command--object",level:2},{value:"lineComment(editor)",id:"linecommenteditor",level:2},{value:"blockComment(editor)",id:"blockcommenteditor",level:2},{value:"duplicateText()",id:"duplicatetext",level:2},{value:"deleteCurrentLines()",id:"deletecurrentlines",level:2},{value:"moveLine(editor, direction)",id:"movelineeditor-direction",level:2},{value:"moveLineUp()",id:"movelineup",level:2},{value:"moveLineDown()",id:"movelinedown",level:2},{value:"openLine(editor, direction)",id:"openlineeditor-direction",level:2},{value:"openLineAbove(editor)",id:"openlineaboveeditor",level:2},{value:"openLineBelow(editor)",id:"openlinebeloweditor",level:2},{value:"indentText()",id:"indenttext",level:2},{value:"unindentText()",id:"unindenttext",level:2}];function h(e){const n={br:"br",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h3,{id:"import-",children:"Import :"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'const EditorCommandHandlers = brackets.getModule("editor/EditorCommandHandlers")\n'})}),"\n",(0,t.jsx)("a",{name:"DIRECTION_UP"}),"\n",(0,t.jsx)(n.h2,{id:"direction_up",children:"DIRECTION_UP"}),"\n",(0,t.jsx)(n.p,{children:"List of constants"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Kind"}),": global variable"]}),"\n",(0,t.jsx)("a",{name:"_getBlockCommentPrefixSuffixEdit"}),"\n",(0,t.jsxs)(n.h2,{id:"_getblockcommentprefixsuffixediteditor-prefix-suffix-lineprefixes-sel-selectionstotrack-command--object--object--null",children:["_getBlockCommentPrefixSuffixEdit(editor, prefix, suffix, linePrefixes, sel, selectionsToTrack, command) \u21d2 ",(0,t.jsx)("code",{children:"Object"})," | ",(0,t.jsx)("code",{children:"Object"})," | ",(0,t.jsx)("code",{children:"null"})]}),"\n",(0,t.jsx)(n.p,{children:"Generates an edit that adds or removes block-comment tokens to the selection, preserving selection\rand cursor position. Applies to the currently focused Editor."}),"\n",(0,t.jsx)(n.p,{children:"If the selection is inside a block-comment or one block-comment is inside or partially inside the selection,\rit will uncomment; otherwise, it will comment out, unless there are multiple block comments inside the selection,\rin which case it does nothing.\rCommenting out adds the prefix before the selection and the suffix after.\rUncommenting removes them."}),"\n",(0,t.jsx)(n.p,{children:"If all the lines inside the selection are line-commented and the selection is not inside a block-comment, it will\rline uncomment all the lines; otherwise, it will block comment/uncomment. In the first case, we return null to\rindicate to the caller that it needs to handle this selection as a line comment."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Kind"}),": global function",(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.strong,{children:"Returns"}),": ",(0,t.jsx)("code",{children:"Object"})," | ",(0,t.jsx)("code",{children:"Object"})," | ",(0,t.jsx)("code",{children:"null"})," - An edit description suitable for including in the edits array passed to ",(0,t.jsx)(n.code,{children:"Document.doMultipleEdits()"}),", or ",(0,t.jsx)(n.code,{children:"null"}),"\rif line commenting should be handled by the caller."]}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Param"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"editor"}),(0,t.jsx)(n.td,{children:(0,t.jsx)("code",{children:"Editor"})}),(0,t.jsx)(n.td,{children:"The editor instance where the operation will occur."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"prefix"}),(0,t.jsx)(n.td,{children:(0,t.jsx)("code",{children:"string"})}),(0,t.jsx)(n.td,{children:'The block comment prefix, e.g., "< !--".'})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"suffix"}),(0,t.jsx)(n.td,{children:(0,t.jsx)("code",{children:"string"})}),(0,t.jsx)(n.td,{children:'The block comment suffix, e.g., "--\x3e".'})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"linePrefixes"}),(0,t.jsx)(n.td,{children:(0,t.jsx)("code",{children:"Array.<string>"})}),(0,t.jsx)(n.td,{children:'The possible line comment prefixes, e.g., ["//"].'})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"sel"}),(0,t.jsx)(n.td,{children:(0,t.jsx)("code",{children:"Object"})}),(0,t.jsx)(n.td,{children:"The selection to block comment/uncomment."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"selectionsToTrack"}),(0,t.jsx)(n.td,{children:(0,t.jsx)("code",{children:"Object"})}),(0,t.jsx)(n.td,{children:"An array of selections that should be tracked through this edit, if any."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"command"}),(0,t.jsx)(n.td,{children:(0,t.jsx)("code",{children:"string"})}),(0,t.jsx)(n.td,{children:'The command being executed, can be "line" or "block".'})]})]})]}),"\n",(0,t.jsx)("a",{name:"_getLineCommentPrefixSuffixEdit"}),"\n",(0,t.jsxs)(n.h2,{id:"_getlinecommentprefixsuffixediteditor-prefix-suffix-linesel-command--object",children:["_getLineCommentPrefixSuffixEdit(editor, prefix, suffix, lineSel, command) \u21d2 ",(0,t.jsx)("code",{children:"Object"})]}),"\n",(0,t.jsxs)(n.p,{children:["Generates an edit that adds or removes block-comment tokens to the selection, preserving selection\rand cursor position. Applies to the currently focused Editor. The selection must already be a\rline selection in the form returned by ",(0,t.jsx)(n.code,{children:"Editor.convertToLineSelections()"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"The implementation uses blockCommentPrefixSuffix, with the exception of the case where\rthere is no selection on an uncommented and not empty line. In this case, the whole line gets\rcommented in a block-comment."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Kind"}),": global function",(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.strong,{children:"Returns"}),": ",(0,t.jsx)("code",{children:"Object"})," - An edit description suitable for including in the edits array passed to ",(0,t.jsx)(n.code,{children:"Document.doMultipleEdits()"}),"."]}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Param"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"editor"}),(0,t.jsx)(n.td,{children:(0,t.jsx)("code",{children:"Editor"})}),(0,t.jsx)(n.td,{children:"The editor instance where the operation will occur."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"prefix"}),(0,t.jsx)(n.td,{children:(0,t.jsx)("code",{children:"string"})}),(0,t.jsx)(n.td,{children:'The block comment prefix, e.g., "< !--".'})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"suffix"}),(0,t.jsx)(n.td,{children:(0,t.jsx)("code",{children:"string"})}),(0,t.jsx)(n.td,{children:'The block comment suffix, e.g., "--\x3e".'})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"lineSel"}),(0,t.jsx)(n.td,{children:(0,t.jsx)("code",{children:"Object"})}),(0,t.jsxs)(n.td,{children:["A line selection as returned from ",(0,t.jsx)(n.code,{children:"Editor.convertToLineSelections()"}),". ",(0,t.jsx)(n.code,{children:"selectionForEdit"})," is the selection to perform      the line comment operation on, and ",(0,t.jsx)(n.code,{children:"selectionsToTrack"})," are a set of selections associated with this line that need to be      tracked through the edit."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"command"}),(0,t.jsx)(n.td,{children:(0,t.jsx)("code",{children:"string"})}),(0,t.jsx)(n.td,{children:'The command being executed, can be "line" or "block".'})]})]})]}),"\n",(0,t.jsx)("a",{name:"lineComment"}),"\n",(0,t.jsx)(n.h2,{id:"linecommenteditor",children:"lineComment(editor)"}),"\n",(0,t.jsx)(n.p,{children:"Invokes a language-specific line-comment/uncomment handler"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Kind"}),": global function"]}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Param"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsx)(n.tbody,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"editor"}),(0,t.jsx)(n.td,{children:(0,t.jsx)("code",{children:"Editor"})}),(0,t.jsx)(n.td,{children:"If unspecified, applies to the currently focused editor"})]})})]}),"\n",(0,t.jsx)("a",{name:"blockComment"}),"\n",(0,t.jsx)(n.h2,{id:"blockcommenteditor",children:"blockComment(editor)"}),"\n",(0,t.jsx)(n.p,{children:"Invokes a language-specific block-comment/uncomment handler"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Kind"}),": global function"]}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Param"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsx)(n.tbody,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"editor"}),(0,t.jsx)(n.td,{children:(0,t.jsx)("code",{children:"Editor"})}),(0,t.jsx)(n.td,{children:"If unspecified, applies to the currently focused editor"})]})})]}),"\n",(0,t.jsx)("a",{name:"duplicateText"}),"\n",(0,t.jsx)(n.h2,{id:"duplicatetext",children:"duplicateText()"}),"\n",(0,t.jsx)(n.p,{children:"Duplicates the selected text, or current line if no selection. The cursor/selection is left\ron the second copy."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Kind"}),": global function"]}),"\n",(0,t.jsx)("a",{name:"deleteCurrentLines"}),"\n",(0,t.jsx)(n.h2,{id:"deletecurrentlines",children:"deleteCurrentLines()"}),"\n",(0,t.jsx)(n.p,{children:"Deletes the current line if there is no selection or the lines for the selection\r(removing the end of line too)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Kind"}),": global function"]}),"\n",(0,t.jsx)("a",{name:"moveLine"}),"\n",(0,t.jsx)(n.h2,{id:"movelineeditor-direction",children:"moveLine(editor, direction)"}),"\n",(0,t.jsx)(n.p,{children:"Moves the selected text, or current line if no selection. The cursor/selection\rmoves with the line/lines."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Kind"}),": global function"]}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Param"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"editor"}),(0,t.jsx)(n.td,{children:(0,t.jsx)("code",{children:"Editor"})}),(0,t.jsx)(n.td,{children:"target editor"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"direction"}),(0,t.jsx)(n.td,{children:(0,t.jsx)("code",{children:"Number"})}),(0,t.jsx)(n.td,{children:"direction of the move (-1,+1) => (Up,Down)"})]})]})]}),"\n",(0,t.jsx)("a",{name:"moveLineUp"}),"\n",(0,t.jsx)(n.h2,{id:"movelineup",children:"moveLineUp()"}),"\n",(0,t.jsx)(n.p,{children:"Moves the selected text, or current line if no selection, one line up. The cursor/selection\rmoves with the line/lines."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Kind"}),": global function"]}),"\n",(0,t.jsx)("a",{name:"moveLineDown"}),"\n",(0,t.jsx)(n.h2,{id:"movelinedown",children:"moveLineDown()"}),"\n",(0,t.jsx)(n.p,{children:"Moves the selected text, or current line if no selection, one line down. The cursor/selection\rmoves with the line/lines."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Kind"}),": global function"]}),"\n",(0,t.jsx)("a",{name:"openLine"}),"\n",(0,t.jsx)(n.h2,{id:"openlineeditor-direction",children:"openLine(editor, direction)"}),"\n",(0,t.jsx)(n.p,{children:"Inserts a new and smart indented line above/below the selected text, or current line if no selection.\rThe cursor is moved in the new line."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Kind"}),": global function"]}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Param"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"editor"}),(0,t.jsx)(n.td,{children:(0,t.jsx)("code",{children:"Editor"})}),(0,t.jsx)(n.td,{children:"target editor"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"direction"}),(0,t.jsx)(n.td,{children:(0,t.jsx)("code",{children:"Number"})}),(0,t.jsx)(n.td,{children:"direction where to place the new line (-1,+1) => (Up,Down)"})]})]})]}),"\n",(0,t.jsx)("a",{name:"openLineAbove"}),"\n",(0,t.jsx)(n.h2,{id:"openlineaboveeditor",children:"openLineAbove(editor)"}),"\n",(0,t.jsx)(n.p,{children:"Inserts a new and smart indented line above the selected text, or current line if no selection.\rThe cursor is moved in the new line."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Kind"}),": global function"]}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Param"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsx)(n.tbody,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"editor"}),(0,t.jsx)(n.td,{children:(0,t.jsx)("code",{children:"Editor"})}),(0,t.jsx)(n.td,{children:"target editor"})]})})]}),"\n",(0,t.jsx)("a",{name:"openLineBelow"}),"\n",(0,t.jsx)(n.h2,{id:"openlinebeloweditor",children:"openLineBelow(editor)"}),"\n",(0,t.jsx)(n.p,{children:"Inserts a new and smart indented line below the selected text, or current line if no selection.\rThe cursor is moved in the new line."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Kind"}),": global function"]}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Param"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsx)(n.tbody,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"editor"}),(0,t.jsx)(n.td,{children:(0,t.jsx)("code",{children:"Editor"})}),(0,t.jsx)(n.td,{children:"target editor"})]})})]}),"\n",(0,t.jsx)("a",{name:"indentText"}),"\n",(0,t.jsx)(n.h2,{id:"indenttext",children:"indentText()"}),"\n",(0,t.jsx)(n.p,{children:"Indent a line of text if no selection. Otherwise, indent all lines in selection."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Kind"}),": global function"]}),"\n",(0,t.jsx)("a",{name:"unindentText"}),"\n",(0,t.jsx)(n.h2,{id:"unindenttext",children:"unindentText()"}),"\n",(0,t.jsx)(n.p,{children:"Unindent a line of text if no selection. Otherwise, unindent all lines in selection."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Kind"}),": global function"]})]})}function x(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>l});var t=i(96540);const r={},d=t.createContext(r);function s(e){const n=t.useContext(d);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(d.Provider,{value:n},e.children)}}}]);