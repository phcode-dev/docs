"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8839],{49:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>a,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var t=n(74848),r=n(28453);const o={},s=void 0,l={id:"API-Reference/features/SelectionViewManager",title:"SelectionViewManager",description:"Import :",source:"@site/api/API-Reference/features/SelectionViewManager.md",sourceDirName:"API-Reference/features",slug:"/API-Reference/features/SelectionViewManager",permalink:"/api/API-Reference/features/SelectionViewManager",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"QuickViewManager",permalink:"/api/API-Reference/features/QuickViewManager"},next:{title:"TaskManager",permalink:"/api/API-Reference/features/TaskManager"}},a={},c=[{value:"Import :",id:"import-",level:3},{value:"features/SelectionViewManager",id:"featuresselectionviewmanager",level:2},{value:"See Related: QuickViewManager",id:"see-related-quickviewmanager",level:3},{value:"Usage",id:"usage",level:2},{value:"How it works",id:"how-it-works",level:3},{value:"API",id:"api",level:2},{value:"registerSelectionViewProvider",id:"registerselectionviewprovider",level:3},{value:"removeSelectionViewProvider",id:"removeselectionviewprovider",level:3},{value:"getSelectionView",id:"getselectionview",level:3},{value:"parameters",id:"parameters",level:4},{value:"return types",id:"return-types",level:4},{value:"Modifying the SelectionView content after resolving <code>getSelectionView</code> promise",id:"modifying-the-selectionview-content-after-resolving-getselectionview-promise",level:4},{value:"Considerations",id:"considerations",level:4},{value:"features/SelectionViewManager.isSelectionViewShown() \u21d2 <code>boolean</code>",id:"featuresselectionviewmanagerisselectionviewshown--boolean",level:3}];function d(e){const i={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.h3,{id:"import-",children:"Import :"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-js",children:'brackets.getModule("features/SelectionViewManager")\n'})}),"\n",(0,t.jsx)("a",{name:"module_features/SelectionViewManager"}),"\n",(0,t.jsx)(i.h2,{id:"featuresselectionviewmanager",children:"features/SelectionViewManager"}),"\n",(0,t.jsx)(i.p,{children:"SelectionViewManager provides support to add interactive preview popups on selection over the main editors.\nThis can be used to provide interactive editor controls on a selected element."}),"\n",(0,t.jsxs)(i.p,{children:["Extensions can register to provide previews with ",(0,t.jsx)(i.code,{children:"SelectionViewManager.registerSelectionViewProvider"})," API."]}),"\n",(0,t.jsx)("img",{src:"https://user-images.githubusercontent.com/5336369/186434397-3db55789-6077-4d02-b4e2-78ef3f663399.png",alt:"Phoenix code selection view"}),"\n",(0,t.jsx)("img",{src:"https://user-images.githubusercontent.com/5336369/186434671-c1b263e5-19a9-4a9d-8f90-507df5f881b5.gif"}),"\n",(0,t.jsx)(i.h3,{id:"see-related-quickviewmanager",children:"See Related: QuickViewManager"}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.a,{href:"https://github.com/phcode-dev/phoenix/wiki/QuickViewManager-API",children:"features/QuickViewManager"})," is similar to\nSelectionViewManager API."]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"SelectionViews popup only once user selects a text by mouse or hover over a region with text selection."}),"\n",(0,t.jsx)(i.li,{children:"Quickviews popup on mouse hover."}),"\n"]}),"\n",(0,t.jsx)("img",{src:"https://docs-images.phcode.dev/phcode-sdk/quick-view-youtube.png",alt:"Phoenix code selection view Youtube image"}),"\n",(0,t.jsx)(i.h2,{id:"usage",children:"Usage"}),"\n",(0,t.jsx)(i.p,{children:'Lets build a "hello world" extension that displays "hello world" above selected text in the editor.\nIn your extension file, add the following code:'}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.strong,{children:"Example"})}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-js",children:'const SelectionViewManager = brackets.getModule("features/SelectionViewManager");\n// replace `all` with language ID(Eg. javascript) if you want to restrict the preview to js files only.\nSelectionViewManager.registerSelectionViewProvider(exports, ["all"]);\n\n// provide a helpful name for the SelectionView. This will be useful if you have to debug the selection view\nexports.SELECTION_VIEW_NAME = "extension.someName";\n// now implement the getSelectionView function that will be invoked when ever user selection changes in the editor.\nexports.getSelectionView = function(editor, selections) {\n        return new Promise((resolve, reject)=>{\n            resolve({\n                content: "<div>hello world</div>"\n            });\n        });\n    };\n'})}),"\n",(0,t.jsx)(i.h3,{id:"how-it-works",children:"How it works"}),"\n",(0,t.jsxs)(i.p,{children:["When SelectionViewManager determines that the user intents to see SelectionViewr, ",(0,t.jsx)(i.code,{children:"getSelectionView"})," function on all\nregistered SelectionView providers are invoked to get the Selection View popup. ",(0,t.jsx)(i.code,{children:"getSelectionView"})," should return\na promise that resolves to the popup contents if the provider has a Selection View. Else just reject the promise.\nIf multiple providers returns SelectionView, all of them are displayed one by one.\nSee detailed API docs for implementation details below:"]}),"\n",(0,t.jsx)(i.h2,{id:"api",children:"API"}),"\n",(0,t.jsx)(i.h3,{id:"registerselectionviewprovider",children:"registerSelectionViewProvider"}),"\n",(0,t.jsxs)(i.p,{children:["Register a SelectionView provider with this api.\n",(0,t.jsx)(i.strong,{children:"Example"})]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-js",children:"// syntax\nSelectionViewManager.registerSelectionViewProvider(provider, supportedLanguages);\n"})}),"\n",(0,t.jsx)(i.p,{children:"The API requires two parameters:"}),"\n",(0,t.jsxs)(i.ol,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"provider"}),": must implement a  ",(0,t.jsx)(i.code,{children:"getSelectionView"})," function which will be invoked to get the preview. See API doc below."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"supportedLanguages"}),": An array of languages that the SelectionView supports. If ",(0,t.jsx)(i.code,{children:'["all"]'})," is supplied, then the\nSelectionView will be invoked for all languages. Restrict to specific languages: Eg: ",(0,t.jsx)(i.code,{children:'["javascript", "html", "php"]'}),"\n",(0,t.jsx)(i.strong,{children:"Example"})]}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-js",children:'// to register a provider that will be invoked for all languages. where provider is any object that implements\n// a getSelectionView function\nSelectionViewManager.registerSelectionViewProvider(provider, ["all"]);\n\n// to register a provider that will be invoked for specific languages\nSelectionViewManager.registerSelectionViewProvider(provider, ["javascript", "html", "php"]);\n'})}),"\n",(0,t.jsx)(i.h3,{id:"removeselectionviewprovider",children:"removeSelectionViewProvider"}),"\n",(0,t.jsxs)(i.p,{children:["Removes a registered SelectionView provider. The API takes the same arguments as ",(0,t.jsx)(i.code,{children:"registerSelectionViewProvider"}),".\n",(0,t.jsx)(i.strong,{children:"Example"})]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-js",children:'// syntax\nSelectionViewManager.removeSelectionViewProvider(provider, supportedLanguages);\n// Example\nSelectionViewManager.removeSelectionViewProvider(provider, ["javascript", "html"]);\n'})}),"\n",(0,t.jsx)(i.h3,{id:"getselectionview",children:"getSelectionView"}),"\n",(0,t.jsxs)(i.p,{children:["Each provider must implement the ",(0,t.jsx)(i.code,{children:"getSelectionView"})," function that returns a promise. The promise either resolves with\nthe Selection View details object(described below) or rejects if there is no preview for the position.\n",(0,t.jsx)(i.strong,{children:"Example"})]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-js",children:'// function signature\nprovider.getSelectionView = function(editor, selections) {\n        return new Promise((resolve, reject)=>{\n            resolve({\n                content: "<div>hello world</div>"\n            });\n        });\n    };\n'})}),"\n",(0,t.jsx)(i.h4,{id:"parameters",children:"parameters"}),"\n",(0,t.jsx)(i.p,{children:"The function will be called with the following arguments:"}),"\n",(0,t.jsxs)(i.ol,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"editor"})," - The editor over which the user hovers the mouse cursor."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"selections"})," - An array containing the active selections when the selection view was trigerred."]}),"\n"]}),"\n",(0,t.jsx)(i.h4,{id:"return-types",children:"return types"}),"\n",(0,t.jsx)(i.p,{children:"The promise returned should resolve to an object with the following contents:"}),"\n",(0,t.jsxs)(i.ol,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"content"}),": Either ",(0,t.jsx)(i.code,{children:"HTML"})," as text, a ",(0,t.jsx)(i.code,{children:"DOM Node"})," or a ",(0,t.jsx)(i.code,{children:"Jquery Element"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(i.h4,{id:"modifying-the-selectionview-content-after-resolving-getselectionview-promise",children:["Modifying the SelectionView content after resolving ",(0,t.jsx)(i.code,{children:"getSelectionView"})," promise"]}),"\n",(0,t.jsxs)(i.p,{children:["Some advanced/interactive extensions may need to do dom operations on the SelectionView content.\nIn such cases, it is advised to return a domNode/Jquery element as content in ",(0,t.jsx)(i.code,{children:"getSelectionView"}),". Event Handlers\nor further dom manipulations can be done on the returned content element.\nThe SelectionView may be dismissed at any time, so be sure to check if the DOM Node is visible in the editor before\nperforming any operations."]}),"\n",(0,t.jsx)(i.h4,{id:"considerations",children:"Considerations"}),"\n",(0,t.jsxs)(i.ol,{children:["\n",(0,t.jsx)(i.li,{children:"SelectionView won't be displayed till all provider promises are settled. To improve performance, if your SelectionView\nhandler takes time to resolve the SelectionView, resolve a dummy quick once you are sure that a SelectionView needs\nto be shown to the user. The div contents can be later updated as and when more details are available."}),"\n",(0,t.jsx)(i.li,{children:"Note that the SelectionView could be hidden/removed any time by the SelectionViewManager."}),"\n",(0,t.jsx)(i.li,{children:"If multiple providers returns a valid popup, all of them are displayed."}),"\n"]}),"\n",(0,t.jsx)("a",{name:"module_features/SelectionViewManager..isSelectionViewShown"}),"\n",(0,t.jsxs)(i.h3,{id:"featuresselectionviewmanagerisselectionviewshown--boolean",children:["features/SelectionViewManager.isSelectionViewShown() \u21d2 ",(0,t.jsx)("code",{children:"boolean"})]}),"\n",(0,t.jsx)(i.p,{children:"If quickview is displayed and visible on screen"}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.strong,{children:"Kind"}),": inner method of ",(0,t.jsx)(i.a,{href:"#module_features/SelectionViewManager",children:(0,t.jsx)("code",{children:"features/SelectionViewManager"})})]})]})}function h(e={}){const{wrapper:i}={...(0,r.R)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},28453:(e,i,n)=>{n.d(i,{R:()=>s,x:()=>l});var t=n(96540);const r={},o=t.createContext(r);function s(e){const i=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function l(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(o.Provider,{value:i},e.children)}}}]);